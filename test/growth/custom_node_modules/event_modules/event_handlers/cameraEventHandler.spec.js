const chai = require('chai')
const assert = chai.assert
const child_process = require('child_process')
const sinon = require('sinon')

const printouts = require('../../../../../custom_node_modules/utility_modules/printouts')
const utils = require('../../../../../custom_node_modules/utility_modules/utils')

let config_helper = require('../../../../../custom_node_modules/utility_modules/config_helper')

describe('cameraEventHandler.js tests', function() {
  describe('takeImage() tests', function () {
    describe('valid config tests', function() {
      // Stub config before we require cameraEventHandler because it'll call these on
      // load.
      let getConfig_stub = sinon.stub(config_helper, 'getConfig')
      getConfig_stub.returns({
        camera: {
          image_directory: './test',
          image_width: 1920,
          image_height: 1080,
          image_quality: 100,
          overlay_time: true,
          overlay_date: true,
          overlay_black: true,
          active_hours:{
            start: '00:00',
            stop: '12:00'
          }
        }
      })
      sinon.stub(config_helper, 'getWebData').returns({
        title: 'title'
      })      
      let cameraEventHandler = require('../../../../../custom_node_modules/event_modules/event_handlers/cameraEventHandler')      

      it('should call exec() and print on success', async function (){
        sinon.stub(child_process, 'exec').yields(null, null, null)
        let stub_log = sinon.stub(printouts, 'simpleLogPrintout')
        cameraEventHandler.takeImage()
        sinon.assert.calledOnce(stub_log)
      })
      
      it('should call exec() and print an error', async function() {
        sinon.stub(child_process, 'exec').yields('ERROR', null, null)
        let stub_error = sinon.stub(printouts, 'simpleErrorPrintout')
        cameraEventHandler.takeImage()
        sinon.assert.calledOnce(stub_error)
      })

      describe('takeImageBetween() tests', function() {
        it('should call takeImage()', function() {
          sinon.stub(utils, 'isTimeBetween').returns(true)
          let stub_takeImage = sinon.stub(cameraEventHandler, 'takeImage')
          cameraEventHandler.takeImageBetween()
          sinon.assert.calledOnce(stub_takeImage)
        })
        
        it('should not call takeImage()', function() {
          sinon.stub(utils, 'isTimeBetween').returns(false)
          let stub_takeImage = sinon.stub(cameraEventHandler, 'takeImage')
          cameraEventHandler.takeImageBetween()
          sinon.assert.notCalled(stub_takeImage)
        })
      })
      getConfig_stub.restore()
    })

    describe('invalid config tests', function() {
      this.beforeEach(() => {
        delete require.cache[require.resolve('../../../../../custom_node_modules/event_modules/event_handlers/cameraEventHandler')]
      })
      sinon.stub(child_process, 'exec').yields(null, null, null)
      it('should throw a TypeError with invalid image dimensions', function() {
      // Stub config before we require cameraEventHandler because it'll call these on
      // load.
        sinon.stub(config_helper, 'getConfig').returns({
          camera: {
            image_directory: './test',
            image_width: "test",
            image_height: 1080,
            image_quality: 100,
            overlay_time: true,
            overlay_date: true,
            overlay_black: true,
            active_hours:{
              start: '00:00',
              stop: '12:00'
            }
          }
        })
        cameraEventHandler = require('../../../../../custom_node_modules/event_modules/event_handlers/cameraEventHandler')
        assert.throws(function() {cameraEventHandler.takeImage()}, 'Image dimensions not a number.')
      })

      it('should throw a TypeError with invalid image quality', function() {
      // Stub config before we require cameraEventHandler because it'll call these on
      // load.
        sinon.stub(config_helper, 'getConfig').returns({
          camera: {
            image_directory: './test',
            image_width: 1920,
            image_height: 1080,
            image_quality: "test",
            overlay_time: true,
            overlay_date: true,
            overlay_black: true,
            active_hours:{
              start: '00:00',
              stop: '12:00'
            }
          }
        })
        cameraEventHandler = require('../../../../../custom_node_modules/event_modules/event_handlers/cameraEventHandler')
        assert.throws(function() {cameraEventHandler.takeImage()}, 'Image quality not a number.')
      })

      it('should throw a TypeError with invalid image overlay value', function() {
      // Stub config before we require cameraEventHandler because it'll call these on
      // load.
        sinon.stub(config_helper, 'getConfig').returns({
          camera: {
            image_directory: './test',
            image_width: 1920,
            image_height: 1080,
            image_quality: 100,
            overlay_time: "test",
            overlay_date: true,
            overlay_black: true,
            active_hours:{
              start: '00:00',
              stop: '12:00'
            }
          }
        })
        cameraEventHandler = require('../../../../../custom_node_modules/event_modules/event_handlers/cameraEventHandler')
        assert.throws(function() {cameraEventHandler.takeImage()}, 'Overlay value not true/false.')
      })
    })
  })
})