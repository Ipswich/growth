const chai = require('chai');
const sinon = require('sinon');
const expect = chai.expect;
const assert = chai.assert;
const dbcalls = require('../../../../../custom_node_modules/utility_modules/database_calls.js');
const eventTriggers = require('../../../../../custom_node_modules/event_modules/eventTriggers');
const utils = require('../../../../../custom_node_modules/utility_modules/utils.js');
const TriggeredScheduleMinder = require('../../../../../custom_node_modules/event_modules/event_handlers/TriggeredScheduleMinder');

let timeEventHandler = require('../../../../../custom_node_modules/event_modules/event_handlers/timeEventHandler');

describe('timeEventHandler.js tests', function() {
  describe('timeEventHandler() tests', function() {
    it('should call triggerEvent once', async function() {
      sinon.stub(dbcalls, 'getEnabledEvents').resolves('');
      sinon.stub(utils, 'getSchedule').resolves('');
      Date.now = sinon.stub().returns(new Date('2020-01-01T12:00:00.000Z'));
      const test_schedule = [
        {
          scheduleID: 1,
          eventTriggerTime: new Date('2020-01-01T12:00:00.000Z')
        },
      ];
      sinon.stub(utils, 'eventTypeMapper').returns(test_schedule);
      const triggerEvent_stub = sinon.stub(eventTriggers, 'triggerEvent');
      await timeEventHandler.timeEventHandler({});
      sinon.assert.calledOnce(triggerEvent_stub);
    });

    it('should error and end early', async function() {
      sinon.stub(dbcalls, 'getEnabledEvents').resolves('');
      sinon.stub(utils, 'getSchedule').resolves('');
      const test_schedule = undefined;
      sinon.stub(utils, 'eventTypeMapper').returns(test_schedule);
      sinon.stub(eventTriggers, 'triggerEvent');
      timeEventHandler.timeEventHandler({
      }).then(function() {
        assert.fail();
      }).catch(function(e) {
        expect(e).to.be.an('error');
      });
    });

    it('should not call triggerEvent (wrong time)', async function() {
      sinon.stub(dbcalls, 'getEnabledEvents').resolves('');
      sinon.stub(utils, 'getSchedule').resolves('');
      Date.now = sinon.stub().returns(new Date('2020-01-01T12:00:00.000Z'));
      const test_schedule = [
        {
          scheduleID: 1,
          eventTriggerTime: new Date('2020-01-01T12:01:00.000Z')
        },
      ];
      sinon.stub(utils, 'eventTypeMapper').returns(test_schedule);
      const triggerEvent_stub = sinon.stub(eventTriggers, 'triggerEvent');
      await timeEventHandler.timeEventHandler({});
      sinon.assert.notCalled(triggerEvent_stub);
    });

    it('should not call triggerEvent (called recently)', async function() {
      sinon.stub(dbcalls, 'getEnabledEvents').resolves('');
      sinon.stub(utils, 'getSchedule').resolves('');
      Date.now = sinon.stub().returns(new Date('2020-01-01T12:00:00.000Z'));
      const test_schedule = [
        {
          scheduleID: 1,
          eventTriggerTime: new Date('2020-01-01T12:00:00.000Z')
        },
      ];

      const minder_stub = sinon.stub(TriggeredScheduleMinder.prototype, 'includes')
      minder_stub.returns(true)
      sinon.stub(utils, 'eventTypeMapper').returns(test_schedule);
      const triggerEvent_stub = sinon.stub(eventTriggers, 'triggerEvent');
      await timeEventHandler.timeEventHandler({});
      sinon.assert.notCalled(triggerEvent_stub);
    });
  });
});