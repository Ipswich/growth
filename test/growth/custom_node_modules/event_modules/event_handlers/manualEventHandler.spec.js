const chai = require('chai')
const sinon = require('sinon')
const expect = chai.expect;
const assert = chai.assert;
const dbcalls = require('../../../../../custom_node_modules/utility_modules/database_calls.js')
const eventTriggers = require('../../../../../custom_node_modules/event_modules/EventTriggers')
const manualEventHandler = require('../../../../../custom_node_modules/event_modules/event_handlers/manualEventHandler')
const utils = require('../../../../../custom_node_modules/utility_modules/utils.js')

describe('manualEventHandler.js tests', () => {
  describe('manualEventHandler() tests', () => {    
    it('should call triggerEvent once', async () => {
      sinon.stub(dbcalls, 'getEnabledEvents').resolves('')
      sinon.stub(eventTriggers, 'getSchedule').resolves('')
      let test_schedule = [
        {
          data : 1
        }
      ]
      sinon.stub(utils, 'eventTypeMapper').returns(test_schedule)
      let triggerEvent_stub = sinon.stub(eventTriggers, 'triggerEvent')
      await manualEventHandler.manualEventHandler({})
      sinon.assert.calledOnce(triggerEvent_stub)
    })  

    it('should throw an error', async () => {

    sinon.stub(dbcalls, 'getEnabledEvents').resolves('')
    sinon.stub(eventTriggers, 'getSchedule').resolves('')
      let test_schedule = undefined
      sinon.stub(utils, 'eventTypeMapper').returns(test_schedule)
      sinon.stub(eventTriggers, 'triggerEvent')
      manualEventHandler.manualEventHandler({        
      }).then(() => {
        assert.fail()
      }).catch((e) => {
        expect(e).to.be.an('error')
      })      
    })
  })

})