const {spawn} = require('child_process')
const fs = require('fs')
const nodemailer = require('nodemailer')
const dbcalls = require('../../../../custom_node_modules/utility_modules/database_calls.js');
const utils = require('../../../../custom_node_modules/utility_modules/Utils.js');
const config_helper = require('../../../../custom_node_modules/utility_modules/config_helper')

const chai = require('chai');
const sinon = require('sinon');
const expect = chai.expect;
const assert = chai.assert;

let eventTriggers = require('../../../../custom_node_modules/event_modules/eventTriggers');

function resetModules() {
  delete require.cache[require.resolve('../../../../custom_node_modules/event_modules/eventTriggers')];
  eventTriggers = require('../../../../custom_node_modules/event_modules/eventTriggers');
}

describe("eventTriggers.js tests", () => {
  beforeEach(() => {
    resetModules()
  })

  describe("getSchedule() tests", () => {
    it('should return only schedules of the passed type', async () => {
      sinon.stub(dbcalls, 'getEnabledLiveSchedules').resolves([
        {scheduleType: "test"},
        {scheduleType: "not_test"},
        {scheduleType: "test"},
      ])
      let result = await eventTriggers.getSchedule('test')
      assert.deepEqual(result, [{scheduleType: 'test'}, {scheduleType: 'test'}])
    })
  })

  describe("turnOffOutput() tests", () => {
    let set_stub = sinon.stub()
    let dummy_state = {
      outputState :{setOutputScheduleState: set_stub}
    }
    let open_stub = sinon.stub()
    let dummy_output = {
      scheduleState: '',
      outputObject: {open: open_stub}
    }

    it('should call open() on the passed object', () => {
      set_stub.resetHistory()
      open_stub.resetHistory()
      eventTriggers.turnOffOutput(dummy_state, dummy_output)      
      sinon.assert.calledOnce(set_stub)
      sinon.assert.calledOnce(open_stub)
    })

    it('should return early, not calling open()', () => {
      set_stub.resetHistory()
      open_stub.resetHistory()
      dummy_output.scheduleState = 'Output Off'
      
      eventTriggers.turnOffOutput(dummy_state, dummy_output)

      sinon.assert.notCalled(set_stub)
      sinon.assert.notCalled(open_stub)
    })
  })

  describe("resumeSchedule() tests", () => {
    let stub_setLastOutputController = sinon.stub()
    let stub_brightness = sinon.stub()
    let stub_close = sinon.stub()
    let stub_open = sinon.stub()

    it('should return false (Output On, no state change)', () => {
      let dummy_state = {
        outputName: null,
        outputController: null,
        outputPin: null,
        outputPWMPin: null,
        manualState: 'Output On',
        scheduleState: 'Output On',
        manualOutputValue: 1,
        scheduleOutputValue: 1,
        outputPWMInversion: null,
        outputPWMObject: {brightness: stub_brightness},
        outputObject: {close: stub_close, open: stub_open}
      }
      let stub_getOutputState = sinon.stub().returns(dummy_state)      
      let dummy_outputState = {
        getOutput: stub_getOutputState,
        setLastOutputController: stub_setLastOutputController
      }

      let result = eventTriggers.resumeSchedule(dummy_outputState, 0)
      assert.isFalse(result)
      sinon.assert.notCalled(stub_close)
    })

    it('should return false (not Output On, no state change)', () => {
      let dummy_state = {
        outputName: null,
        outputController: null,
        outputPin: null,
        outputPWMPin: null,
        manualState: 'Output Off',
        scheduleState: 'Output Off',
        manualOutputValue: 1,
        scheduleOutputValue: 1,
        outputPWMInversion: null,
        outputPWMObject: {brightness: stub_brightness},
        outputObject: {close: stub_close, open: stub_open}
      }
      let stub_getOutputState = sinon.stub().returns(dummy_state)      
      let dummy_outputState = {
        getOutput: stub_getOutputState,
        setLastOutputController: stub_setLastOutputController
      }

      let result = eventTriggers.resumeSchedule(dummy_outputState, 0)
      assert.isFalse(result)
      sinon.assert.notCalled(stub_open)
    })

    it('should return true (Output On)', () => {
      let dummy_state = {
        outputName: null,
        outputController: null,
        outputPin: null,
        outputPWMPin: null,
        manualState: 'Output Off',
        scheduleState: 'Output On',
        manualOutputValue: 1,
        scheduleOutputValue: 1,
        outputPWMInversion: null,
        outputPWMObject: {brightness: stub_brightness},
        outputObject: {close: stub_close, open: stub_open}
      }
      let stub_getOutputState = sinon.stub().returns(dummy_state)      
      let dummy_outputState = {
        getOutput: stub_getOutputState,
        setLastOutputController: stub_setLastOutputController
      }

      let result = eventTriggers.resumeSchedule(dummy_outputState, 0)
      assert.isTrue(result)
      sinon.assert.calledOnce(stub_brightness)
      sinon.assert.calledOnce(stub_close)
    })

    it('should return true (not Output On)', () => {
      let dummy_state = {
        outputName: null,
        outputController: null,
        outputPin: null,
        outputPWMPin: null,
        manualState: 'Output On',
        scheduleState: 'Output Off',
        manualOutputValue: 1,
        scheduleOutputValue: 1,
        outputPWMInversion: null,
        outputPWMObject: {brightness: stub_brightness},
        outputObject: {close: stub_close, open: stub_open}
      }
      let stub_getOutputState = sinon.stub().returns(dummy_state)      
      let dummy_outputState = {
        getOutput: stub_getOutputState,
        setLastOutputController: stub_setLastOutputController
      }

      let result = eventTriggers.resumeSchedule(dummy_outputState, 0)
      assert.isTrue(result)
      sinon.assert.calledOnce(stub_open)
    })
    
    

  })

  describe('filterOn() tests', () => {
    let setOutputScheduleState_stub = sinon.stub()
    let setOutputManualState_stub = sinon.stub()
    let setLastOutputController_stub = sinon.stub()

    afterEach(() => {
      setOutputScheduleState_stub.resetHistory()
      setOutputManualState_stub.resetHistory()
      setLastOutputController_stub.resetHistory()
    })

    let dummy_state = {
      outputState: {
        setOutputScheduleState: setOutputScheduleState_stub,
        setOutputManualState: setOutputManualState_stub,
        setLastOutputController: setLastOutputController_stub
      }
    }
    describe('manual controller tests', () => {
      it('should return false and update schedule state(schedule instruction)', () => {
        let dummy_output = {
          outputID: 1,
          outputName: "test",
          outputController: "Manual",
          lastOutputController: "Schedule",
          scheduleState: "Output On",
          outputPWMObject: true,
          scheduleOutputValue: 1
        }

        let dummy_schedule = {
          scheduleType: "Schedule"
        }
        assert.isFalse(eventTriggers.filterOn(dummy_output, dummy_schedule, dummy_state, 0))
        sinon.assert.calledOnce(setOutputScheduleState_stub)
      })

      it('should return false and update manual state (manual instruction, schedule last state, no change in output/PWM)', () => {
        let dummy_output = {
          outputID: 1,
          outputName: "test",
          outputController: "Manual",
          lastOutputController: "Schedule",
          scheduleState: "Output On",
          outputPWMObject: true,
          scheduleOutputValue: 1
        }

        let dummy_schedule = {
          scheduleType: "Manual"
        }
        assert.isFalse(eventTriggers.filterOn(dummy_output, dummy_schedule, dummy_state, 1))
        sinon.assert.calledOnce(setOutputManualState_stub)
      })

      it('should return false and update manual state (manual instruction, schedule last state, no change in output)', () => {
        let dummy_output = {
          outputID: 1,
          outputName: "test",
          outputController: "Manual",
          lastOutputController: "Schedule",
          scheduleState: "Output On",
          outputPWMObject: false,
          scheduleOutputValue: 1
        }

        let dummy_schedule = {
          scheduleType: "Manual"
        }
        assert.isFalse(eventTriggers.filterOn(dummy_output, dummy_schedule, dummy_state, 1))
        sinon.assert.calledOnce(setOutputManualState_stub)
      })

      it('should return false (manual instruction, manual last state, no change in output/PWM', () => {
        let dummy_output = {
          outputID: 1,
          outputName: "test",
          outputController: "Manual",
          lastOutputController: "Manual",
          manualState: "Output On",
          outputPWMObject: true,
          manualOutputValue: 1
        }

        let dummy_schedule = {
          scheduleType: "Manual"
        }
        assert.isFalse(eventTriggers.filterOn(dummy_output, dummy_schedule, dummy_state, 1))        
      })

      it('should return false (manual instruction, manual last state, no change in output', () => {
        let dummy_output = {
          outputID: 1,
          outputName: "test",
          outputController: "Manual",
          lastOutputController: "Manual",
          manualState: "Output On",
          outputPWMObject: false,
          manualOutputValue: 1
        }

        let dummy_schedule = {
          scheduleType: "Manual"
        }
        assert.isFalse(eventTriggers.filterOn(dummy_output, dummy_schedule, dummy_state, 1))        
      })
    })

    describe('not manual controller tests', () => {
      it('should return false and update manual state(schedule instruction)', () => {
        let dummy_output = {
          outputID: 1,
          outputName: "test",
          outputController: "Schedule",
          lastOutputController: "Schedule",
          scheduleState: "Output On",
          outputPWMObject: true,
          scheduleOutputValue: 1
        }

        let dummy_schedule = {
          scheduleType: "Manual"
        }
        assert.isFalse(eventTriggers.filterOn(dummy_output, dummy_schedule, dummy_state, 1))
        sinon.assert.calledOnce(setOutputManualState_stub)
      })

      it('should return false (schedule instruction, schedule last state, no change in output/PWM)', () => {
        let dummy_output = {
          outputID: 1,
          outputName: "test",
          outputController: "Schedule",
          lastOutputController: "Schedule",
          scheduleState: "Output On",
          outputPWMObject: true,
          scheduleOutputValue: 1
        }

        let dummy_schedule = {
          scheduleType: "Schedule"
        }
        assert.isFalse(eventTriggers.filterOn(dummy_output, dummy_schedule, dummy_state, 1))
      })

      it('should return false (schedule instruction, schedule last state, no change in output)', () => {
        let dummy_output = {
          outputID: 1,
          outputName: "test",
          outputController: "Schedule",
          lastOutputController: "Schedule",
          scheduleState: "Output On",
          outputPWMObject: false,
          scheduleOutputValue: 1
        }

        let dummy_schedule = {
          scheduleType: "Schedule"
        }
        assert.isFalse(eventTriggers.filterOn(dummy_output, dummy_schedule, dummy_state, 1))
      })

      it('should return false and update schedule state (schedule instruction, manual last state, no change in output/PWM)', () => {
        let dummy_output = {
          outputID: 1,
          outputName: "test",
          outputController: "Schedule",
          lastOutputController: "Manual",
          manualState: "Output On",
          outputPWMObject: true,
          manualOutputValue: 1
        }

        let dummy_schedule = {
          scheduleType: "Schedule"
        }
        assert.isFalse(eventTriggers.filterOn(dummy_output, dummy_schedule, dummy_state, 1))
        sinon.assert.calledOnce(setOutputScheduleState_stub)
      })

      it('should return false and update schedule state (schedule instruction, manual last state, no change in output)', () => {
        let dummy_output = {
          outputID: 1,
          outputName: "test",
          outputController: "Schedule",
          lastOutputController: "Manual",
          manualState: "Output On",
          outputPWMObject: false,
          manualOutputValue: 1
        }

        let dummy_schedule = {
          scheduleType: "Schedule"
        }
        assert.isFalse(eventTriggers.filterOn(dummy_output, dummy_schedule, dummy_state, 1))
        sinon.assert.calledOnce(setOutputScheduleState_stub)
      })
    })

    it('should return true', () => {
      let dummy_output = {
        outputID: 1,
        outputName: "test",
        outputController: "Schedule",
        lastOutputController: "Manual",
        manualState: "Output On",
        outputPWMObject: false,
        manualOutputValue: 0
      }

      let dummy_schedule = {
        scheduleType: "Schedule"
      }
      assert.isFalse(eventTriggers.filterOn(dummy_output, dummy_schedule, dummy_state, 1))
      sinon.assert.calledOnce(setOutputScheduleState_stub)
    })
  })

  describe('filterOff() tests', () => {
    let setOutputScheduleState_stub = sinon.stub()
    let setOutputManualState_stub = sinon.stub()
    let setLastOutputController_stub = sinon.stub()

    afterEach(() => {
      setOutputScheduleState_stub.resetHistory()
      setOutputManualState_stub.resetHistory()
      setLastOutputController_stub.resetHistory()
    })

    let dummy_state = {
      outputState: {
        setOutputScheduleState: setOutputScheduleState_stub,
        setOutputManualState: setOutputManualState_stub,
        setLastOutputController: setLastOutputController_stub
      }
    }

    describe('manual controller tests', () => {
      it('should return false update schedule state (schedule instruction)', () => {
        let dummy_output = {
          outputID: 1,
          outputName: "test",
          outputController: "Manual",
          lastOutputController: "Schedule",
          scheduleState: "Output Off"
        }

        let dummy_schedule = {
          scheduleType: "Schedule"
        }
        assert.isFalse(eventTriggers.filterOff(dummy_output, dummy_schedule, dummy_state, 1))
        sinon.assert.calledOnce(setOutputScheduleState_stub)
      })

      it('should return false and update manual state (manual instruction, schedule last state, no change in output)', () => {
        let dummy_output = {
          outputID: 1,
          outputName: "test",
          outputController: "Manual",
          lastOutputController: "Schedule",
          scheduleState: "Output Off"
        }

        let dummy_schedule = {
          scheduleType: "Manual"
        }
        assert.isFalse(eventTriggers.filterOff(dummy_output, dummy_schedule, dummy_state, 1))
        sinon.assert.calledOnce(setOutputManualState_stub)
      })

      it('should return false (manual instruction, manual last state, no change in output)', () => {
        let dummy_output = {
          outputID: 1,
          outputName: "test",
          outputController: "Manual",
          lastOutputController: "Manual",
          manualState: "Output Off"
        }

        let dummy_schedule = {
          scheduleType: "Manual"
        }

        assert.isFalse(eventTriggers.filterOff(dummy_output, dummy_schedule, dummy_state, 1))
      })
    })
    describe('not manual controller tests', () => {
      it('should return false (manual instruction)', () => {
        let dummy_output = {
          outputID: 1,
          outputName: "test",
          outputController: "Schedule",
          lastOutputController: "Manual",
          manualState: "Output Off"
        }

        let dummy_schedule = {
          scheduleType: "Manual"
        }
        
        assert.isFalse(eventTriggers.filterOff(dummy_output, dummy_schedule, dummy_state, 1))
        sinon.assert.calledOnce(setOutputManualState_stub)
      })

      it('should return false (manual instruction, schedule last state, no change in output)', () => {
        let dummy_output = {
          outputID: 1,
          outputName: "test",
          outputController: "Schedule",
          lastOutputController: "Schedule",
          scheduleState: "Output Off"
        }

        let dummy_schedule = {
          scheduleType: "Manual"
        }
        
        assert.isFalse(eventTriggers.filterOff(dummy_output, dummy_schedule, dummy_state, 1))        
      })
    })
    it('should return true', () => {
      let dummy_output = {
        outputID: 1,
        outputName: "test",
        outputController: "Manual",
        lastOutputController: "Schedule",
        manualState: "Output Off"
      }

      let dummy_schedule = {
        scheduleType: "Manual"
      }

      assert.isTrue(eventTriggers.filterOff(dummy_output, dummy_schedule, dummy_state, 1))
    })
  })
})