const chai = require('chai')
const sinon = require('sinon')
const assert = chai.assert;
const five = require('johnny-five')
const initializeSensors = require('../../../../custom_node_modules/initialization_modules/initializeSensors')
const initializeOutputs = require('../../../../custom_node_modules/initialization_modules/initializeOutputs')
const events = require('events')

let config_helper = require('../../../../custom_node_modules/utility_modules/config_helper')
sinon.stub(config_helper, 'getConfig').returns({log_interval: 60000, camera:{interval:300000}})
let initializeSchedule = require('../../../../custom_node_modules/initialization_modules/initializeSchedule');

let mappings
let systemInitializer
function resetModules() {
  delete require.cache[require.resolve('../../../../custom_node_modules/initialization_modules/systemInitializer')];
  delete require.cache[require.resolve('../../../../custom_node_modules/utility_modules/mappings')];
  mappings = require('../../../../custom_node_modules/utility_modules/mappings');
  systemInitializer = require('../../../../custom_node_modules/initialization_modules/systemInitializer');
}

describe('systemInitializer.js tests', function() {
  beforeEach(function() {
    resetModules()
  })
  describe('initialize() tests', function() {
    it('should add a board object, but no outputs or sensors', async function() {
      let test_state = {
        "outputState": {
          "data": []    
        },
        "sensorState": {
          "data": []
        }
      }

      let board_dummy = new events.EventEmitter()
      board_dummy.port = "Mock"
      
      sinon.stub(five, "Board").returns(board_dummy)
      sinon.stub(initializeSensors, 'initializeSensors').resolves(undefined)
      sinon.stub(initializeOutputs, 'initializeOutputs').returns(undefined)
      sinon.stub(initializeSchedule, 'initializeSchedule').returns()

      let SI_promise = systemInitializer.initialize(test_state)
      board_dummy.emit('initialized')
      board_dummy.emit('ready')
      await SI_promise

      assert.equal(Object.keys(test_state).length, 3)
      assert.equal(test_state.board.port, 'Mock')
    })

    it('should add a board object, and a relay control object', async function() {
      let test_state = {
        "outputState": {
          "data": []    
        },
        "sensorState": {
          "data": []
        }
      }

      let board_dummy = new events.EventEmitter()
      board_dummy.port = "Mock"
      
      sinon.stub(five, "Board").returns(board_dummy)
      sinon.stub(initializeSensors, 'initializeSensors').resolves(undefined)
      let relay_control_stub = sinon.stub()
      let initializeOutputsStub = sinon.stub(initializeOutputs, 'initializeOutputs')
      initializeOutputsStub.callsFake(function(state) { 
        let relay_control = {high: relay_control_stub}                    
        state.relay_control = relay_control
        return undefined
      })
      sinon.stub(initializeSchedule, 'initializeSchedule').returns()

      let SI_promise = systemInitializer.initialize(test_state)
      board_dummy.emit('initialized')
      board_dummy.emit('ready')
      await SI_promise

      assert.equal(Object.keys(test_state).length, 4)
      assert.equal(test_state.board.port, 'Mock')
    })
    
    it('should add a board object and a PWM output', async function() {
      let test_state = {
        "outputState": {
          "data": [{
            outputPin: 2, 
            outputObject: undefined, 
            outputPWMPin: 3,
            outputPWMObject: undefined
          }]    
        },
        "sensorState": {
          "data": []
        }
      }
      let board_dummy = new events.EventEmitter()
      board_dummy.port = "Mock"
      sinon.stub(five, "Board").returns(board_dummy)
      sinon.stub(initializeSensors, 'initializeSensors').resolves()
      sinon.stub(initializeOutputs, 'initializeOutputs').callsFake(function(state) {                     
        state.outputState.data[0].outputObject = "output"
        state.outputState.data[0].outputPWMObject = "PWM"
        return undefined
      })
      sinon.stub(initializeSchedule, 'initializeSchedule').returns()

      let SI_promise = systemInitializer.initialize(test_state)
      board_dummy.emit('initialized')
      board_dummy.emit('ready')
      await SI_promise

      assert.equal(Object.keys(test_state).length, 3)
      assert.equal(test_state.board.port, 'Mock')
      assert.deepEqual(test_state.outputState.data[0].outputObject, "output")
      assert.deepEqual(test_state.outputState.data[0].outputPWMObject, "PWM")
    })

    it('should add a board object, and 1 thermometer', async function() {
      let test_state = {
        "outputState": {
          "data": []    
        },
        "sensorState": {
          "data": [{
            sensorType: "Temperature",
            sensorModel: "Thermometer",
            sensorPin: 1,
            sensorAddress: null,
            sensorHardwareID: 1,
            sensorID: 1,
            sensorObject: undefined
          }]
        }
      }
      
      let board_dummy = new events.EventEmitter()
      board_dummy.port = "Mock"
      sinon.stub(five, "Board").returns(board_dummy)
      sinon.stub(initializeSensors, 'initializeSensors').callsFake(function(state) {
        state.sensorState.data[0].sensorObject = "thermometer"
        return undefined
      })
      sinon.stub(initializeOutputs, 'initializeOutputs').returns()
      sinon.stub(initializeSchedule, 'initializeSchedule').returns()

      let SI_promise = systemInitializer.initialize(test_state)
      board_dummy.emit('initialized')
      board_dummy.emit('ready')
      await SI_promise
      
      assert.equal(Object.keys(test_state).length, 3)
      assert.equal(test_state.board.port, 'Mock')
      assert.deepEqual(test_state.sensorState.data[0].sensorObject, "thermometer")
    })

    it('should reject with an error', async function() {
      let test_state = {
        "outputState": {
          "data": []    
        },
        "sensorState": {
          "data": []
        }
      }

      let board_dummy = new events.EventEmitter()
      board_dummy.port = "Mock"
      
      sinon.stub(five, "Board").returns(board_dummy)
      sinon.stub(initializeSensors, 'initializeSensors').throws(new Error('Error!'))
      try {
        let SI_promise = systemInitializer.initialize(test_state)
        board_dummy.emit('initialized')
        board_dummy.emit('ready')
        await SI_promise
        assert.fail()
      } catch (e) {
        assert.typeOf(e, 'Error')
      }
    })
  })
})