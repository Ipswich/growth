const chai = require('chai')
const sinon = require('sinon')
const assert = chai.assert;
var five = require('johnny-five')
var systemInitializer = require('../../../custom_node_modules/initialization_modules/SystemInitializer');
const initializeSensors = require('../../../custom_node_modules/initialization_modules/initializeSensors')
const initializeOutputs = require('../../../custom_node_modules/initialization_modules/initializeOutputs')
const initializeSchedule = require('../../../custom_node_modules/initialization_modules/initializeSchedule');
const events = require('events')

function resetModules() {
  delete require.cache[require.resolve('../../../custom_node_modules/initialization_modules/SystemInitializer')];
  delete require.cache[require.resolve('../../../custom_node_modules/utility_modules/mappings')];
  delete require.cache[require.resolve('../../../custom_node_modules/utility_modules/config_helper')];  
  config_helper = require('../../../custom_node_modules/utility_modules/config_helper')
  mappings = require('../../../custom_node_modules/utility_modules/mappings');
  systemInitializer = require('../../../custom_node_modules/initialization_modules/SystemInitializer');
}

describe('SystemInitializer.js tests', () => {
  beforeEach(() => {
    resetModules()    
  })
  describe('initialize() tests', () => {
    it('should add a board object, but no outputs or sensors', async () => {
      let test_state = {
        "outputState": {
          "data": []    
        },
        "sensorState": {
          "data": []
        }
      }

      let board_dummy = new events.EventEmitter()
      board_dummy.port = "Mock"
      
      sinon.stub(five, "Board").returns(board_dummy)
      sinon.stub(initializeSensors, 'initializeSensors').resolves(undefined)
      sinon.stub(initializeOutputs, 'initializeOutputs').returns(undefined)
      sinon.stub(initializeSchedule, 'initializeSchedule').returns()

      await systemInitializer.initialize(test_state)
      board_dummy.emit('initialized')
      board_dummy.emit('ready')

      assert.equal(Object.keys(test_state).length, 3)
      assert.equal(test_state.board.port, 'Mock')
    })

    it('should add a board object, and a relay control object', async () => {
      let test_state = {
        "outputState": {
          "data": []    
        },
        "sensorState": {
          "data": []
        }
      }

      let board_dummy = new events.EventEmitter()
      board_dummy.port = "Mock"
      
      sinon.stub(five, "Board").returns(board_dummy)
      sinon.stub(initializeSensors, 'initializeSensors').resolves(undefined)
      let relay_control_stub = sinon.stub()
      let initializeOutputsStub = sinon.stub(initializeOutputs, 'initializeOutputs')
      initializeOutputsStub.callsFake(function(state) { 
        let relay_control = {high: relay_control_stub}                    
        state.relay_control = relay_control
        return undefined
      })
      sinon.stub(initializeSchedule, 'initializeSchedule').returns()

      await systemInitializer.initialize(test_state).then(() => {
        board_dummy.emit('initialized')
        board_dummy.emit('ready')
      })

      assert.equal(Object.keys(test_state).length, 4)
      assert.equal(test_state.board.port, 'Mock')
    })
    
    it('should add a board object and a PWM output', async () => {
      let test_state = {
        "outputState": {
          "data": [{
            outputPin: 2, 
            outputObject: undefined, 
            outputPWMPin: 3,
            outputPWMObject: undefined
          }]    
        },
        "sensorState": {
          "data": []
        }
      }
      let board_dummy = new events.EventEmitter()
      board_dummy.port = "Mock"
      sinon.stub(five, "Board").returns(board_dummy)
      sinon.stub(initializeSensors, 'initializeSensors').resolves()
      sinon.stub(initializeOutputs, 'initializeOutputs').callsFake(function(state) {                     
        state.outputState.data[0].outputObject = "output"
        state.outputState.data[0].outputPWMObject = "PWM"
        return undefined
      })
      sinon.stub(initializeSchedule, 'initializeSchedule').returns()
      await systemInitializer.initialize(test_state).then(() => {
        board_dummy.emit('initialized')
        board_dummy.emit('ready')
      })
      assert.equal(Object.keys(test_state).length, 3)
      assert.equal(test_state.board.port, 'Mock')
      assert.deepEqual(test_state.outputState.data[0].outputObject, "output")
      assert.deepEqual(test_state.outputState.data[0].outputPWMObject, "PWM")
    })

    it('should add a board object, and 1 thermometer', async () => {
      let test_state = {
        "outputState": {
          "data": []    
        },
        "sensorState": {
          "data": [{
            sensorType: "Temperature",
            sensorModel: "Thermometer",
            sensorPin: 1,
            sensorAddress: null,
            sensorHardwareID: 1,
            sensorID: 1,
            sensorObject: undefined
          }]
        }
      }
      
      let board_dummy = new events.EventEmitter()
      board_dummy.port = "Mock"
      sinon.stub(five, "Board").returns(board_dummy)
      sinon.stub(initializeSensors, 'initializeSensors').callsFake(function(state) {
        state.sensorState.data[0].sensorObject = "thermometer"
        return undefined
      })
      sinon.stub(initializeOutputs, 'initializeOutputs').returns()
      sinon.stub(initializeSchedule, 'initializeSchedule').returns()
      await systemInitializer.initialize(test_state).then(() => {
        board_dummy.emit('initialized')
        board_dummy.emit('ready')
      })
      assert.equal(Object.keys(test_state).length, 3)
      assert.equal(test_state.board.port, 'Mock')
      assert.deepEqual(test_state.sensorState.data[0].sensorObject, "thermometer")
    })
  })
})