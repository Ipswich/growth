const chai = require('chai')
const sinon = require('sinon')
const assert = chai.assert;
const dbcalls = require('../../../../custom_node_modules/utility_modules/database_calls');

var mappings
var config_helper
function resetModules() {
  delete require.cache[require.resolve('../../../../custom_node_modules/utility_modules/mappings')];
  delete require.cache[require.resolve('../../../../custom_node_modules/utility_modules/config_helper')];
  mappings = require('../../../../custom_node_modules/utility_modules/mappings');
  config_helper = require('../../../../custom_node_modules/utility_modules/config_helper')
}

describe('Mappings.js tests', () => {
  var sensor_fixture = [
    { sensorHardwareID: 1, sensorProtocol: 'I2C' },
    { sensorHardwareID: 1, sensorProtocol: 'I2C' },
    { sensorHardwareID: 1, sensorProtocol: 'I2C' },
    { sensorHardwareID: 2, sensorProtocol: 'ONEWIRE'},
    { sensorHardwareID: 4, sensorProtocol: 'ANALOG'},
    { sensorHardwareID: 3, sensorProtocol: 'ONEWIRE'},
    { sensorHardwareID: 5, sensorProtocol: 'ANALOG'},
    { sensorHardwareID: 6, sensorProtocol: 'FOO'},
    { sensorHardwareID: 7, sensorProtocol: 'BAZ'},
    { sensorHardwareID: 6, sensorProtocol: 'BAR'}
  ]

  var standard_board_mappings_return = {
    OUTPUT_PINS: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    PWM_PINS: [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
    SDAPIN: 41,
    SCLPIN: 42,
    SENSOR_PINS: [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
    ANALOG_PINS: [31, 32, 33, 34, 35, 36, 37, 38, 39, 40]    
  }

  var output_fixture = [
    {outputPWM: 1},
    {outputPWM: 0},
    {outputPWM: 0},
    {outputPWM: 1}
  ]
  
  beforeEach(() => {
    resetModules()    
  })
  describe('getBoardMapping() tests', () => {
    beforeEach(() => {
      resetModules();
    });
    let board_fixture = {"test" : {}}
    it('should set and return a parsed JSON object', () => {
      sinon.stub(config_helper, 'getConfig').returns({board: "test"})
      sinon.stub(JSON, 'parse').returns(board_fixture) 
      assert.deepEqual(mappings.getBoardMapping(), {})
    })
    it('should call JSON.parse() only once, returning the board from the initial call', () => {
      sinon.stub(config_helper, 'getConfig').returns({board: "test"})
      let JSON_stub = sinon.stub(JSON, 'parse').returns(board_fixture)
      mappings.getBoardMapping()
      assert.deepEqual(mappings.getBoardMapping(), {})
      sinon.assert.calledOnce(JSON_stub)
    })
  })

  describe('getOutputMappings() tests', async () => {
    it('should call mapOutputPins referencing the database', async () =>{
      let expected = [
        { outputPWM: 1, OUTPUT_PIN: 2, PWM_PIN: 11 },
        { outputPWM: 0, OUTPUT_PIN: 3 },
        { outputPWM: 0, OUTPUT_PIN: 4 },
        { outputPWM: 1, OUTPUT_PIN: 5, PWM_PIN: 12 }
      ]
      sinon.stub(mappings,'getBoardMapping').returns(structuredClone(standard_board_mappings_return))
      sinon.stub(dbcalls, 'getEnabledOutputs').resolves(output_fixture)
      let actual = await mappings.getOutputMappings()
      assert.deepEqual(actual, expected)
    })
  })

  describe('getSensorMappings() tests', async () => {
    it('should call mapSensorPins referencing the database', async () =>{
      let expected = [
        { sensorHardwareID: 1, sensorProtocol: 'I2C' },
        { sensorHardwareID: 1, sensorProtocol: 'I2C' },
        { sensorHardwareID: 1, sensorProtocol: 'I2C' },
        { sensorHardwareID: 2, sensorProtocol: 'ONEWIRE', SENSOR_PIN: 21 },
        { sensorHardwareID: 4, sensorProtocol: 'ANALOG', SENSOR_PIN: 31 },
        { sensorHardwareID: 3, sensorProtocol: 'ONEWIRE', SENSOR_PIN: 21 },
        { sensorHardwareID: 5, sensorProtocol: 'ANALOG', SENSOR_PIN: 32 },
        { sensorHardwareID: 6, sensorProtocol: 'FOO', SENSOR_PIN: 22 },
        { sensorHardwareID: 7, sensorProtocol: 'BAZ', SENSOR_PIN: 23 },
        { sensorHardwareID: 6, sensorProtocol: 'BAR', SENSOR_PIN: 22 }
      ]
      sinon.stub(dbcalls, 'getEnabledSensors').resolves(sensor_fixture)
      sinon.stub(mappings,'getBoardMapping').returns(structuredClone(standard_board_mappings_return))
      let actual = await mappings.getSensorMappings()
      assert.deepEqual(actual, expected)
    })
  })

  describe('mapOutputPins() tests', () => {
    it('should return proper board mappings (relay toggle on)', () => {
      sinon.stub(mappings, 'getBoardMapping').returns(structuredClone(standard_board_mappings_return))
      sinon.stub(config_helper, 'getConfig').returns({relay_toggle_prevention : true})         
      let expected = [
        { outputPWM: 1, OUTPUT_PIN: 2, PWM_PIN: 11 },
        { outputPWM: 0, OUTPUT_PIN: 3 },
        { outputPWM: 0, OUTPUT_PIN: 4 },
        { outputPWM: 1, OUTPUT_PIN: 5, PWM_PIN: 12 }
      ]
      let actual = mappings.mapOutputPins(output_fixture)
      assert.deepEqual(actual, expected)
    })

    it('should return proper board mappings (relay toggle off)', () => {
      sinon.stub(mappings, 'getBoardMapping').returns(structuredClone(standard_board_mappings_return))
      sinon.stub(config_helper, 'getConfig').returns({relay_toggle_prevention : false})    
      let expected = [
        { outputPWM: 1, OUTPUT_PIN: 1, PWM_PIN: 11 },
        { outputPWM: 0, OUTPUT_PIN: 2 },
        { outputPWM: 0, OUTPUT_PIN: 3 },
        { outputPWM: 1, OUTPUT_PIN: 4, PWM_PIN: 12 }
      ]
      let actual = mappings.mapOutputPins(output_fixture)
      assert.deepEqual(actual, expected)
    })
    it('should run out of digital pins and call process.exit()', () => {
      var output_pin_mappings_return = {
        OUTPUT_PINS: [],
        PWM_PINS: [1]
      }
      sinon.stub(mappings, 'getBoardMapping').returns(output_pin_mappings_return)
      sinon.stub(config_helper, 'getConfig').returns({relay_toggle_prevention : false})    
      var process_stub = sinon.stub(process, 'exit')
      mappings.mapOutputPins(output_fixture)
      sinon.assert.calledOnce(process_stub)
      
      })
    it('should run out of PWM pins and call process.exit()', () => {
      var pwm_pin_mappings_return = {
        OUTPUT_PINS: [1],
        PWM_PINS: []
      }
      sinon.stub(mappings, 'getBoardMapping').returns(pwm_pin_mappings_return)
      sinon.stub(config_helper, 'getConfig').returns({relay_toggle_prevention : false})    
      var process_stub = sinon.stub(process, 'exit')
      mappings.mapOutputPins(output_fixture)      
      sinon.assert.calledOnce(process_stub)
    })
  })
  
  describe('mapSensorPins() tests', () => {
    it('should return proper sensor mappings', async () => {
      let expected = [
        { sensorHardwareID: 1, sensorProtocol: 'I2C' },
        { sensorHardwareID: 1, sensorProtocol: 'I2C' },
        { sensorHardwareID: 1, sensorProtocol: 'I2C' },
        { sensorHardwareID: 2, sensorProtocol: 'ONEWIRE', SENSOR_PIN: 21 },
        { sensorHardwareID: 4, sensorProtocol: 'ANALOG', SENSOR_PIN: 31 },
        { sensorHardwareID: 3, sensorProtocol: 'ONEWIRE', SENSOR_PIN: 21 },
        { sensorHardwareID: 5, sensorProtocol: 'ANALOG', SENSOR_PIN: 32 },
        { sensorHardwareID: 6, sensorProtocol: 'FOO', SENSOR_PIN: 22 },
        { sensorHardwareID: 7, sensorProtocol: 'BAZ', SENSOR_PIN: 23 },
        { sensorHardwareID: 6, sensorProtocol: 'BAR', SENSOR_PIN: 22 }
      ]
      sinon.stub(mappings,'getBoardMapping').returns(structuredClone(standard_board_mappings_return))
      let actual = mappings.mapSensorPins(sensor_fixture)
      assert.deepEqual(actual, expected)      
    })

    it('Error and exit on running out of sensor pins', async () => {
      var sensor_pin_mappings_return = {
        SENSOR_PINS : [],
        ANALOG_PINS : [1]
      }
      sinon.stub(mappings,'getBoardMapping').returns(sensor_pin_mappings_return)
      let process_stub = sinon.stub(process,'exit').returns() 
      mappings.mapSensorPins(sensor_fixture)
      sinon.assert.calledOnce(process_stub)
    })

    it('Error and exit on running out of analog pins', async () => {
      var sensor_pin_mappings_return = {
        SENSOR_PINS : [1],
        ANALOG_PINS : []
      }
      sinon.stub(mappings,'getBoardMapping').returns(sensor_pin_mappings_return)
      let process_stub = sinon.stub(process,'exit').returns() 
      mappings.mapSensorPins(sensor_fixture)
      sinon.assert.calledOnce(process_stub)
    })
  })
})