// const chai = require('chai').assert
// const Mappings = require('../../../../custom_node_modules/utility_modules/Mappings.js')

// describe('Mappings.js Tests', () => {
//   describe('getOutputMappings()', () => {
//     it('should create an object of output mappings from the test database', async () => {
//       let val = await Mappings.getOutputMappings()
//       let answer = [
//         {
//           outputID: 1,
//           outputTypeID: 1,
//           outputName: 'Standard Output',
//           outputDescription: '',
//           Oenabled: 1,
//           outputOrder: 0,
//           outputType: 'Standard Output',
//           outputPWM: 0,
//           outputPWMInversion: 0,
//           OTenabled: 1,
//           OUTPUT_PIN: 2        
//         },
//         {
//           outputID: 2,
//           outputTypeID: 2,
//           outputName: 'Standard PWM Output',
//           outputDescription: '',
//           Oenabled: 1,
//           outputOrder: 1,
//           outputType: 'Standard PWM Output',
//           outputPWM: 1,
//           outputPWMInversion: 0,
//           OTenabled: 1,
//           OUTPUT_PIN: 3,
//           PWM_PIN: 11
//         },
//         {
//           outputID: 3,
//           outputTypeID: 3,
//           outputName: 'Inverted PWM Output',
//           outputDescription: '',
//           Oenabled: 1,
//           outputOrder: 2,
//           outputType: 'Inverted PWM Output',
//           outputPWM: 1,
//           outputPWMInversion: 1,
//           OTenabled: 1,
//           OUTPUT_PIN: 4,
//           PWM_PIN: 12
//         }      
//       ]
//       chai.deepEqual(answer, val)
//     });
//   });
//   describe('getSensorMappings()', () => {
//     it('should create an object of sensor mappings from the test database', async () => {
//       let val = await Mappings.getSensorMappings()
//       let answer = [
//         {
//           sensorID: 1,
//           sensorModel: 'BME280',
//           sensorType: 'Temperature',
//           sensorLocation: 'Control Box',
//           sensorUnits: '°F',
//           SSenabled: 1,
//           sensorHardwareID: 1,
//           sensorProtocol: 'I2C',
//           sensorAddress: null
//         },
//         {
//           sensorID: 2,
//           sensorModel: 'BME280',
//           sensorType: 'Pressure',
//           sensorLocation: 'Control Box',
//           sensorUnits: 'kPa',
//           SSenabled: 1,
//           sensorHardwareID: 1,
//           sensorProtocol: 'I2C',
//           sensorAddress: null
//         },
//         {
//           sensorID: 3,
//           sensorModel: 'BME280',
//           sensorType: 'Humidity',
//           sensorLocation: 'Control Box',
//           sensorUnits: '% rH',
//           SSenabled: 1,
//           sensorHardwareID: 1,
//           sensorProtocol: 'I2C',
//           sensorAddress: null
//         },
//         {
//           sensorID: 4,
//           sensorModel: 'DS18B20',
//           sensorType: 'Temperature',
//           sensorLocation: 'OutsideF',
//           sensorUnits: '°F',
//           SSenabled: 1,
//           sensorHardwareID: 2,
//           sensorProtocol: 'ONEWIRE',
//           sensorAddress: null,
//           SENSOR_PIN: 21
//         },
//         {          
//           sensorID: 5,
//           sensorModel: 'DS18B20',
//           sensorType: 'Temperature',
//           sensorLocation: 'OutsideC',
//           sensorUnits: '°C',
//           SSenabled: 1,
//           sensorHardwareID: 3,
//           sensorProtocol: 'ONEWIRE',
//           sensorAddress: null,
//           SENSOR_PIN: 21
//         }
//       ]
//       chai.deepEqual(val, answer)
//     });
//   });
// });