const five = require('johnny-five')
const config_helper = require('../utility_modules/config_helper')
const mappings = require('../utility_modules/mappings')
const printouts = require('../utility_modules/printouts')

/**
 * Adds outputs to the passed state object according to the values present in
 * the object. Adds both main and PWM controls as needed. Additionally, adds a
 * relay_control pin to the state object if specified in config.
 * @param {object} state The current state of the app
 * @param {object} board The parent board for the outputs
 * @returns 
 */
function initializeOutputs(state, board) {
  state.relay_control = undefined
  let config = config_helper.getConfig()
  //If relay toggle prevention is set in config, create pin with first output pin
  relayToggleCheck(state, config, board)

  //Ensure that max listeners for events is appropriate to suppress warnings.  
  board.setMaxListeners(board.getMaxListeners() + maxListenerCheck(state, config))  
  
  //Set up outputs and bind to state object.
  for(let i = 0; i < state.outputState.data.length; i++){
    let outputPin = state.outputState.data[i].outputPin
    var output = new five.Relay({
      pin: outputPin,
      type: "NC"
    })
    state.outputState.data[i].outputObject = output
    if(state.outputState.data[i].outputPWMPin != null){
      let PWMPin = state.outputState.data[i].outputPWMPin
      var PWM = new five.Led(PWMPin);
      state.outputState.data[i].outputPWMObject = PWM
      //Handle board interrupts for PWM (turn off stuff)
      board.on('exit', () => {
        PWM.off()
      })
      try {
        PWM.off()
      } catch (e) {
        printouts.errorPrintout("Arduino out of PWM pins! Could not attach all output PWMs, please check your board config.")
        throw e
      }
    }
    //Handle board interrupts for main control (turn off stuff)
    board.on('exit', () => {
      output.open()           
    })
    try {
      output.open()
    } catch (e) {
      printouts.errorPrintout("Arduino out of output pins! Could not attach all outputs, please check your board config.")
      throw e
    }
  }
  return
}
module.exports.initializeOutputs = initializeOutputs


/**
 * Calculates an approximate max number of event listeners for the given outputs.
 * @param {object} state
 * @param {object} config 
 * @returns The max number of event listeners
 */
function maxListenerCheck(state, config) {
  let maxListeners = state.outputState.data.length * 2
  if (config.relay_toggle_prevention){
    maxListeners++
  }
  return maxListeners
}

/**
 * Appends a relay control pin to the state object if it should exist.
 * @param {object} state
 * @param {object} config 
 * @param {object} board 
 */
function relayToggleCheck(state, config, board){
  if(config.relay_toggle_prevention){ 
    state.relay_control = new five.Pin(mappings.getBoardMapping().OUTPUT_PINS[0])
    //Handle board interrupts (turn off stuff)
    board.on('exit', () => {
      relay_control.low()           
    })
  }
}