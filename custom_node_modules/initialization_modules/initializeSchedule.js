const dbcalls = require('../utility_modules/database_calls')
const sLogger = require('../event_modules/sensorLogger')
const utils = require('../utility_modules/utils')
const html_generators = require('../utility_modules/html_generators')
const tEventHandler = require('../event_modules/event_handlers/timeEventHandler')
const sEventHandler = require('../event_modules/event_handlers/sensorEventHandler')
const pEventHandler = require('../event_modules/event_handlers/periodicEventHandler')

const LOGGING_TIMER = 60 * 1000 // 1 MINUTE
const EVENT_TIMER = 1 * 1000 // 1 SECOND

/**
 * Initializes the schedule (time/sensor/periodic/minder), logging, and
 * establishes chart regeneration.
 * @param {object} state the current state
 */
async function initializeSchedule(state) {
  //Take initial reading to update database
  //Run events when ready, then set Interval.
  state.events = await dbcalls.getEnabledEvents()
  await sLogger.addSensorReadings(state)
  state.sensorState.writeSensorIndexDataToFile()
  await html_generators.regenerateChartData()
  await tEventHandler.timeEventHandler(state);
  await sEventHandler.sensorEventHandler(state);
  await pEventHandler.periodicEventHandler(state);
  setInterval(async function() {
    await sLogger.addSensorReadings(state)
    state.sensorState.writeSensorIndexDataToFile()
    await html_generators.regenerateChartData()
  }, LOGGING_TIMER);
  setInterval(async function() {
    await utils.scheduleMinder(state)
    await tEventHandler.timeEventHandler(state);
    await sEventHandler.sensorEventHandler(state);
    await pEventHandler.periodicEventHandler(state);
  }, EVENT_TIMER);
}
module.exports.initializeSchedule = initializeSchedule