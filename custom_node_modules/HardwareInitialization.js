var five = require("johnny-five");
var mappings = require('./Mappings.js')

const BME280_ADDRESS = 0x76; //TRY 0x77 IF BOARD ISN'T FINDING YOUR SENSOR


module.exports.initialize = function initialize(state) {
  var sensors;
  return new Promise(async (resolve) => {
    sensors = await mappings.getSensorMappings();
    resolve(sensors);
  }).then(async (sensors) => {
    console.log("Initializing board. . .");
    var board = new five.Board({
    repl: false,
    // debug: false
    });
    state.board = board;
    return board;
  }).then((board) => {
    board.once("ready", function() {
      console.log("Initializing sensors . . .");
      //Set up outputs and bind to state object.
      for(let i = 1; i <= state.outputState.getOutputState().length; i++){
        if(state.outputState.getOutputType(i) == 'Light'){
          var output = new five.Relay(state.outputState.getOutputPin(i));
          var PWM = new five.Led(state.outputState.getOutputPWMPin(i));
          state.outputState.setOutputObject(i, output);
          state.outputState.setOutputPWMObject(i, PWM);
        } else {
          var output = new five.Relay(state.outputState.getOutputPin(i));
          state.outputState.setOutputObject(i, output);
        }
      }

      //Set up sensors and bind to state object.
      //Get max hardwareID
      var hardwareID = Math.max.apply(Math, state.sensorState.getSensorState().map(function(o) { return o.sensorHardwareID; }));
      let sensor;

      //Loop through hardware IDs
      while (hardwareID > 0) {
        let i = 1;
        //Loop through sensors to find ones with matching hardwareID
        for(i; i <= state.sensorState.getSensorState().length; i++){
          var obj= {}
          //If matching hardwareID and protocol is I2C, create device
          if(hardwareID == state.sensorState.getSensorHardwareID(i) && state.sensorState.getSensorProtocol(i) == 'I2C'){
            obj = {controller: state.sensorState.getSensorModel(i)}
            if(state.sensorState.getSensorModel(i) == "BME280"){
              obj.address = BME280_ADDRESS;
            }
            switch (state.sensorState.getSensorType(i)) {
              case 'Temperature':
                sensor = new five.Thermometer(obj)
                state.sensorState.setSensorObject(i, sensor);
                break;
              case 'Humidity':
                sensor = new five.Hygrometer(obj)
                state.sensorState.setSensorObject(i, sensor);
                break;
              case 'Pressure':
                sensor = new five.Barometer(obj)
                state.sensorState.setSensorObject(i, sensor);
                break;
              case 'CarbonDioxide':
                sensor = -1;
                state.sensorState.setSensorObject(i, sensor);
                break;
              default:
                sensor = -1;
                state.sensorState.setSensorObject(i, sensor);
              }
          } else if(hardwareID == state.sensorState.getSensorHardwareID(i)) {
            obj = {controller: state.sensorState.getSensorModel(i), pin: state.sensorState.getSensorPin(i)}
            switch (state.sensorState.getSensorType(i)) {
              case 'Temperature':
                // sensor = new five.Thermometer(obj)
                if(state.sensorState.getSensorModel(i) == "DS18B20"){
                  //https: //github.com/rwaldron/johnny-five/issues/1207
                  console.log("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
                }
                // sensor = -1;
                state.sensorState.setSensorObject(i, sensor);
                break;
              case 'Humidity':
                sensor = new five.Hygrometer(obj)
                state.sensorState.setSensorObject(i, sensor);
                break;
              case 'Pressure':
                sensor = new five.Barometer(obj)
                state.sensorState.setSensorObject(i, sensor);
                break;
              case 'CarbonDioxide':
                sensor = -1;
                state.sensorState.setSensorObject(i, sensor);
                break;
              default:
                sensor = -1;
                state.sensorState.setSensorObject(i, sensor);
            }
          }
        }
        hardwareID--;
      }
      console.log(". . .Done!");
      return state;
      // console.log(state.outputState.getOutputState());
      // console.log(state.sensorState.getSensorState());
    })
  });
}
