var five = require("johnny-five");
var mappings = require('./Mappings.js')


module.exports.initialize = function initialize(state) {
  var sensors;
  return new Promise(async (resolve) => {
    sensors = await mappings.getSensorMappings();
    resolve(sensors);
  }).then(async (sensors) => {
    // var board = new five.Board({
    // repl: false,
    // debug: false
    // });
    let board = -1;
    return (board);
  }).then((board) => {
    // board.on("ready", function(){
    //Set up outputs and bind to state object.
    for(let i = 1; i <= state.outputState.getOutputState().length; i++){
      if(state.outputState.getOutputType(i) == 'Light'){
        // var output = new five.Relay(state.outputState.getOutputPin(i));
        // var PWM = new five.Led(state.outputState.getOutputPWMPin(i));
        let output = -1;
        let PWM = -1;
        state.outputState.setOutputObject(i, output);
        state.outputState.setOutputPWMObject(i, PWM);
      } else {
        // var output = new five.Relay(state.outputState.getOutputPin(i));
        let output = -1;
        state.outputState.setOutputObject(i, output);
      }
    }

    //Set up sensors and bind to state object.
    //Get max hardwareID
    var hardwareID = Math.max.apply(Math, state.sensorState.getSensorState().map(function(o) { return o.sensorHardwareID; }));
    let sensor;
    while (hardwareID > 0) {
      for(let i = 1; i <= state.sensorState.getSensorState().length; i++){
        var obj= {}
        if(hardwareID == state.sensorState.getSensorHardwareID(i) && state.sensorState.getSensorProtocol(i) == 'I2C'){
          obj = {controller: state.sensorState.getSensorModel(i)}
          switch (state.sensorState.getSensorType(i)) {
            case 'Temperature':
              // sensor = new five.Thermometer(obj)
              sensor = -1;
              state.sensorState.setSensorObject(i, sensor);
              break;
            case 'Humidity':
              // sensor = new five.Hygrometer(obj)
              sensor = -1;
              state.sensorState.setSensorObject(i, sensor);
              break;
            case 'Pressure':
              // sensor = new five.Barometer(obj)
              sensor = -1;
              state.sensorState.setSensorObject(i, sensor);
              break;
            case 'CarbonDioxide':
              sensor = -1;
              state.sensorState.setSensorObject(i, sensor);
              break;
            default:
              sensor = -1;
              state.sensorState.setSensorObject(i, sensor);
            }
        } else {
          obj = {controller: state.sensorState.getSensorModel(i), pin: state.sensorState.getSensorPin(i)}
          switch (state.sensorState.getSensorType(i)) {
            case 'Temperature':
              // sensor = new five.Thermometer(obj)
              sensor = -1;
              state.sensorState.setSensorObject(i, sensor);
              break;
            case 'Humidity':
              // sensor = new five.Hygrometer(obj)
              sensor = -1;
              state.sensorState.setSensorObject(i, sensor);
              break;
            case 'Pressure':
              // sensor = new five.Barometer(obj)
              sensor = -1;
              state.sensorState.setSensorObject(i, sensor);
              break;
            case 'CarbonDioxide':
              sensor = -1;
              state.sensorState.setSensorObject(i, sensor);
              break;
            default:
              sensor = -1;
              state.sensorState.setSensorObject(i, sensor);
            }
        }
      }
      hardwareID--;
    }
    // })
    return state;
  });
}
