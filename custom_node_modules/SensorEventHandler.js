var mysql = require('mysql');
var moment = require('moment');
var mappings = require('./Mappings.js')
var outputState = require('./OutputState.js')
var eventTriggers = require('./EventTriggers.js')
var utils = require('./Utils.js')

//Runs sensor events based on last readings from DB
module.exports.SensorEventHandler = async function SensorEventHandler(state){
  const events = await eventTriggers.getEvents();
  const schedule = await eventTriggers.getSchedule('Sensor');
  var sensorData = [];
  for(let i = 1; i <= state.sensorState.getSensorState().length; i++){
    sensorData[i] = await utils.getSensorVal(state, i);
  }
  if (events == undefined || schedule == undefined) {
    console.error("SensorEventHandler.js: SensorEventHandler() failed!");
  } else {
    //Iterate through schedules
    for(let i = 0; i < schedule.length; i++) {
      //Find the last sensor reading for the schedule's sensor
      for(let j = 1; j <= sensorData.length; j++) {
        if(sensorData[j] && schedule[i].sensorID == sensorData[j].sensorID) {
          var sensorVal = sensorData[j].val;
        }
      }
      //Switch based on schedule's comparator
      switch(schedule[i].scheduleComparator) {
      case '>':
        if(sensorVal > schedule[i].sensorValue) {
          eventTriggers.triggerEvent(schedule[i], state);
        }
        break;
      case '<':
        if(sensorVal < schedule[i].sensorValue) {
          eventTriggers.triggerEvent(schedule[i], state);
        }
        break;
      }
    }
  }
}
