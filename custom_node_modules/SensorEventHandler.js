var mysql = require('mysql');
var config = require('../config/config.json');
var moment = require('moment');
var mappings = require('./Mappings.js')

if(process.env.NODE_ENV == 'development'){
  config = config.development;
} else {
  config = config.production;
}

//Runs sensor events based on last readings from DB
module.exports.SensorEventHandler = async function SensorEventHandler(){
  const events = await getEvents();
  const sensorReadings = await getSensorReadings();
  const outputs = await mappings.getOutputMappings();
  const schedule = await getSchedule();
  if (events == undefined || outputs == undefined || schedule == undefined) {
    console.error("SensorEventHandler.js: SensorEventHandler() failed!");
  } else {
    //Iterate through schedules
    for(let i = 0; i < schedule.length; i++) {
      //Find the last sensor reading for the schedule's sensor
      for(let j = 0; j < sensorReadings.length; j++) {
        if(schedule[i].sensorID == sensorReadings[j].sensorID){
          var sensorVal = sensorReadings[j].data;
        }
      }
      //Switch based on schedule's comparator
      switch(schedule[i].scheduleComparator) {
      case '>':
        if(sensorVal > schedule[i].sensorValue) {
          triggerEvent(schedule[i], outputs);
        }
        break;
      case '<':
        if(sensorVal < schedule[i].sensorValue) {
          triggerEvent(schedule[i], outputs);
        }
        break;
      }
    }
  }
}

//Gets last conditions
function getSensorReadings() {
  return new Promise(resolve => {
    var con = mysql.createConnection(config.database);
    con.connect((err) => {
      if(err){
        reject(err);
      } else {
        con.query('CALL getSensorLastReadings()', (error, results, fields) => {
          //Error on problem.
          if(error) {
            console.error("SensorEventHandler.js: getSensorReadings() failed, database error.");
            con.destroy();
            reject(error);
          } else {
            //DO STUFF WITH DATA
            con.destroy();
            resolve(results[0])
          }
        })
      }
    });
  })
}

//Gets enabled sensor events from DB
function getEvents() {
  return new Promise(resolve => {
    var con = mysql.createConnection(config.database);
    con.connect((err) => {
      if(err){
        reject(err);
      } else {
        con.query('CALL getEnabledEvents()', (error, results, fields) => {
          //Error on problem.
          if(error) {
            console.error("SensorEventHandler.js: getEvents() failed, database error.");
            con.destroy();
            reject(error);
          } else {
            //DO STUFF WITH DATA
            con.destroy();
            resolve(results[0])
          }
        })
      }
    });
  })
}

//Gets the current live and enabled schedule from DB
function getSchedule() {
  return new Promise(resolve => {
    var con = mysql.createConnection(config.database);
    con.connect((err) => {
      if(err){
        reject(err);
      } else {
        con.query('CALL getEnabledLiveSchedules()', (error, results, fields) => {
          //Error on problem.
          if(error) {
            console.error("SensorEventHandler.js: getEnabledLiveSchedules() failed, database error.");
            con.destroy();
            reject(error);
          } else {
            //DO STUFF WITH DATA
            con.destroy();
            var schedule = results[0].filter(filterByScheduleType)
            resolve(schedule)
          }
        })
      }
    });
  })
}

//Triggers event on hardware
function triggerEvent(schedule, outputs) {
  for(let i = 0; i < outputs.length; i++){
    if (outputs[i].outputID == schedule.outputID){
      output = outputs[i];
    }
  }
  switch (schedule.eventID) {
    case 1:
      console.log(output.outputName + " @ " + output.OUTPUTPIN +  ": ON @ " + schedule.outputValue + ", pwmPin: " + output.PWMPIN);
      logEvent(schedule.scheduleID);
      break;
    case 2:
      console.log(output.outputName + " @ " + output.OUTPUTPIN + ": OFF!");
      logEvent(schedule.scheduleID);
      break;
  }
}

//Logs that an event occurred
function logEvent(scheduleID) {
  return new Promise(resolve => {
    var con = mysql.createConnection(config.database);
    con.connect((err) => {
      if(err){
        reject(err);
      } else {
        con.query('CALL logScheduledEvent(' + scheduleID + ')', (error, results, fields) => {
          //Error on problem.
          if(error) {
            console.error("SensorEventHandler.js: logEvent() failed, database error.");
            con.destroy();
            reject(error);
          } else {
            //DO STUFF WITH DATA
            con.destroy();
            resolve()
          }
        })
      }
    });
  })
}

//Function for filtering out Sensor schedules from Time Schedules.
function filterByScheduleType(schedule){
  if (schedule.scheduleType == 'Sensor'){
    return true;
  }
  return false;
}
