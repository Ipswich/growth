var mysql = require('mysql');
var config = require('../config/config.json');

//Start and End Digital Pins on Arduino Mega
const START_OUTPUT_PIN = 22;
const END_OUTPUT_PIN = 37;
//Start and End PWM Pins on Arduino Mega
const START_PWM_PIN = 2;
const END_PWM_PIN = 13;
//I2C pins on Arduino Mega
const SDAPIN = 20;
const SCLPIN = 21;
//Start and End Sensor Pins
const START_SENSOR_PIN = 38;
const END_SENSOR_PIN = 53;
//Start and End analog Pins
const START_ANALOG_PIN = 54;
const END_ANALOG_PIN = 69;


if(process.env.NODE_ENV == 'development'){
  config = config.development;
} else {
  config = config.production;
}


//Maps pins for each output.
module.exports.getOutputMappings = async function getOutputMapings() {
  //Gets enabled outputs from DB
  return new Promise(resolve => {
    var con = mysql.createConnection(config.database);
    con.connect((err) => {
      if(err){
        reject(err);
      } else {
        con.query('CALL getEnabledOutputs()', (error, results, fields) => {
          //Error on problem.
          if(error) {
            console.error("Mappings.js: getOutputMappings() failed, database error.");
            con.destroy();
            reject(error);
          } else {
            //DO STUFF WITH DATA
            con.destroy();
            var outputs = mapOutputPins(results[0]);
            resolve(outputs);
          }
        })
      }
    });
  })
}

//Maps pins for each sensor
module.exports.getSensorMappings = async function getSensorMappings() {
  //Gets enabled sensors from DB
  return new Promise(resolve => {
    var con = mysql.createConnection(config.database);
    con.connect((err) => {
      if(err){
        reject(err);
      } else {
        con.query('CALL getEnabledSensors()', (error, results, fields) => {
          //Error on problem.
          if(error) {
            console.error("Mappings.js: getSensorMappings() failed, database error.");
            con.destroy();
            reject(error);
          } else {
            //DO STUFF WITH DATA
            con.destroy();            
            var sensors = mapSensorPins(results[0]);
            resolve(sensors);
          }
        })
      }
    });
  })
}

//Adds OUTPUTPIN property to each output
//Adds PWMPIN Property to the following output types:
// Lights
function mapOutputPins(outputs) {
  var outputPin = START_OUTPUT_PIN;
  var pwmPin = START_PWM_PIN
  //Iterate through outputs
  for(i = 0; i < outputs.length; i++){
    //If we've run out of output pins, error.
    if (outputPin > END_OUTPUT_PIN) {
      console.error("Mappings.js: mapOutputPins() failed, out of digital pins!");
      break;
    }
    //Otherwise set OUTPUTPIN property to outputPin and increment to the next one
    outputs[i].OUTPUT_PIN = outputPin;
    outputPin++;
    //If we've run out of PWM pins, error.
    if (pwmPin > END_PWM_PIN) {
      console.error("Mappings.js: mapOutputPins() failed, out of PWM pins!");
      break;
    }
    //Otherwise apply PWMPIN property if necessary.
    switch(outputs[i].outputType) {
      case 'Light':
        outputs[i].PWM_PIN = pwmPin;
        pwmPin++;
        break;
    }
  };
  return outputs;
}

//Adds SENSORPIN property to each sensor
function mapSensorPins(sensors) {
  let sensorPin = START_SENSOR_PIN;
  let analogPin = START_ANALOG_PIN;
  let DS18B20Pin = -1;
  //Iterate through sensors
  let hardwareIDs = [];
  // console.log(sensors)
  for(i = 0; i < sensors.length; i++) {
    //Check to see if hardwareID exists in array
    if(hardwareIDs.indexOf(sensors[i].sensorHardwareID) === -1){
      //if no, add to array.
      hardwareIDs.push(sensors[i].sensorHardwareID);
    } else {
      //if yes, skip to avoid unnecessary mappings.
      continue;
    }
    //If we've run out of output pins, error.
    if (sensorPin > END_SENSOR_PIN) {
      console.error("Mappings.js: mapSensorPins() failed, out of analog pins!");
      break;
    }
    //Otherwise, case switch to apply pins to appropriate sensors
    switch (sensors[i].sensorProtocol) {
      case "I2C":
        continue;
      case "ANALOG":
        sensors[i].SENSOR_PIN = analogPin;
        analogPin++;
        continue;
      case "ONEWIRE":
        if (DS18B20Pin == -1) {
          DS18B20Pin = sensorPin
          sensorPin++;
        }
        sensors[i].SENSOR_PIN = DS18B20Pin;
        continue;
      default: 
        sensors[i].SENSOR_PIN = sensorPin;
        sensorPin++;
    } 
  };
  return sensors;
}
