var config = require('../config/config.json');
var dbcalls = require('./database_calls.js')

if(process.env.NODE_ENV == 'development'){
  config = config.development;
} else {
  config = config.production;
}

//Gets the current live and enabled schedule from DB
module.exports.getSchedule = async function getSchedule(type) {
  return filterByScheduleType(await dbcalls.getEnabledLiveSchedules(), type)
}

//Triggers event on hardware
module.exports.triggerEvent = function triggerEvent(schedule, state) {
  //Iterate through output mappings to get output
  for(let i = 0; i < state.outputState.getOutputState().length; i++){
    //if current output ID matches passed schedule output ID
    if (state.outputState.getOutputState()[i].outputID == schedule.outputID){
      //set output to that output
      var output = state.outputState.getOutputState()[i];
    }
  }
  //Case switch based on event ID 1 = on, 2 = off
  let outputStateData = state.outputState.getOutputState();
  switch (schedule.eventID) {
    case 1:
      //schedule ID does not exist in outputs list, add it
      // if(!state.outputState.checkOutputSchedules(output.outputID, schedule.scheduleID)){                
      //   state.outputState.addOutputSchedules(output.outputID, schedule.scheduleID, schedule.scheduleType, schedule.eventTriggerTime);
      //   console.log("ADDED: " + output.outputType)
      //   console.log(state.outputState.getOutputSchedules(output.outputID));
      // }

      //Iterate through state
      for (let i = 0; i < outputStateData.length; i++){
        //if state is already set to on AND outputValue == scheduleOutputValue, return
        if ((output.outputID == outputStateData[i].outputID) && (outputStateData[i].scheduleState == 1) && (outputStateData[i].scheduleOutputValue == schedule.outputValue)) {
          return;
        }
      }

      //Otherwise, update state and log and do stuff
      if(output.outputPWNMPin != null) {
        console.log(output.outputName + " @ " + output.outputPin +  ": ON @ " + schedule.outputValue + "%, pwmPin: " + output.outputPWMPin);      
      } else {
        console.log(output.outputName + " @ " + output.outputPin +  ": ON");      
      }
      output.outputObject.close();
      if(output.outputPWMObject){
        let base = 255/100;
        let value = Math.round(base * schedule.outputValue);
        output.outputPWMObject.brightness(value);
      }
      state.outputState.setOutputScheduleState(output.outputID, 1, schedule.outputValue);
      dbcalls.logScheduledEvent(schedule.scheduleID);
      break;
    case 2:
      //Time event - purge all ON events from event list
      // if(schedule.scheduleType == 'Time'){
      //   console.log(state.outputState.getOutputSchedules(output.outputID))
      //   console.log("pre splice: " + state.outputState.getOutputSchedules(output.outputID));
      //   state.outputState.clearTimeOutputSchedules(output.outputID);
      //   console.log("post splice: " + state.outputState.getOutputSchedules(output.outputID));
      // }

      //Iterate through state - if state is already set to off, return
      for (let i = 0; i < outputStateData.length; i++){
        if ((output.outputID == outputStateData[i].outputID) && (outputStateData[i].scheduleState == 2)) {
          return;
        }
      }

      //Otherwise, update state and log and do stuff
      console.log(output.outputName + " @ " + output.outputPin + ": OFF");
      output.outputObject.open();
      state.outputState.setOutputScheduleState(output.outputID, 2, schedule.outputValue);
      dbcalls.logScheduledEvent(schedule.scheduleID);
      break;
  }
}


//Gracefully turns off and updates state for the given output
module.exports.turnOffOutput = function turnOffOutput(state, output){
  // if state is already set to off, return
  if (output.scheduleState == 2) {
    return;
  }
  //Otherwise, update state and log and do stuff
  console.log(output.outputName + " @ " + output.outputPin + ": OFF");
  output.outputObject.open();
  state.outputState.setOutputScheduleState(output.outputID, 2, 0);
}

//Function for filtering out type schedules from Sensor Schedules.
function filterByScheduleType(schedule, type) {
  var result = [];
  for(let i = 0; i < schedule.length; i++){
    if (schedule[i].scheduleType == type){
      result.push(schedule[i]);
    }
  }
  return result;
}
