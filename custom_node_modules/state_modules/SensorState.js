var fs = require('fs')
var mappings = require('../utility_modules/Mappings.js');
var utils = require('../utility_modules/Utils')

DATA_DIRECTORY = './data/'
FILE_NAME = 'SensorState.json'

module.exports = class SensorState {
  constructor() {
    return (async () => {
      this.data = [];
      //Get outputs
      let sensorMappings = await mappings.getSensorMappings();
      //map initial values (default to off (event 2))
      for (let i = 0; i < sensorMappings.length; i++){
        this.data[i] = {};
        this.data[i].sensorID = sensorMappings[i].sensorID;
        this.data[i].sensorHardwareID = sensorMappings[i].sensorHardwareID;
        this.data[i].sensorModel = sensorMappings[i].sensorModel;
        this.data[i].sensorType = sensorMappings[i].sensorType;
        this.data[i].sensorLocation = sensorMappings[i].sensorLocation;
        this.data[i].sensorUnits = sensorMappings[i].sensorUnits;
        this.data[i].sensorProtocol = sensorMappings[i].sensorProtocol;
        this.data[i].sensorPin = sensorMappings[i].SENSOR_PIN ? sensorMappings[i].SENSOR_PIN : null;
        this.data[i].sensorAddress = sensorMappings[i].sensorAddress;
        this.data[i].sensorObject = null;
        this.data[i].SSenabled = sensorMappings[i].SSenabled;
        this.data[i].sensorLastReading = null;
      }
      return this;
    })();
  }
  
  getSensorIndexData(){
    let sensors = [];
    for(let i = 0; i < this.data.length; i++){
      let RowDataPacket = {}
      RowDataPacket.sensorID = this.data[i].sensorID
      RowDataPacket.sensorModel = this.data[i].sensorModel
      RowDataPacket.sensorType = this.data[i].sensorType
      RowDataPacket.sensorLocation = this.data[i].sensorLocation
      RowDataPacket.sensorUnits = this.data[i].sensorUnits
      RowDataPacket.SSenabled = this.data[i].SSenabled
      RowDataPacket.sensorHardwareID = this.data[i].sensorHardwareID
      RowDataPacket.sensorProtocol = this.data[i].sensorProtocol
      RowDataPacket.sensorAddress = this.data[i].sensorAddress
      RowDataPacket.sensorLastReading = this.data[i].sensorLastReading
      sensors.push(RowDataPacket)
    }
    return sensors
  }
  
  getSensorTypes(){
    let sensorTypes = [];
    let types = []
    for(let i = 0; i < this.data.length; i++){
      if (!types.includes(this.data[i].sensorType)){
        let RowDataPacket = {};
        RowDataPacket.sensorType = this.data[i].sensorType
        sensorTypes.push(RowDataPacket)
        types.push(this.data[i].sensorType)
      }
    }
    return sensorTypes;
  }
  
  getSensor(sensorID) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].sensorID == sensorID){
        return this.data[i];
      }
    }
  }

  getSensorState(){
    return this.data;
  }

  writeSensorIndexDataToFile(){
    fs.writeFile(DATA_DIRECTORY + FILE_NAME, JSON.stringify(this.getSensorIndexData(), null, 4), function(err) {
      if (err) {
        utils.debugPrintout(err)
      }
    })
  }
}
