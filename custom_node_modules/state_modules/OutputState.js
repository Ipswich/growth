var mappings = require('../utility_modules/Mappings.js');
var dbcalls = require('../utility_modules/database_calls.js')

module.exports = class OutputState {
  constructor() {
    return (async () => {
      this.data = [];
      //Get outputs
      let outputMappings = await mappings.getOutputMappings();
      //map initial values (default to off (event 2))
      for (let i = 0; i < outputMappings.length; i++){
        this.data[i] = {};
        this.data[i].outputID = outputMappings[i].outputID;
        this.data[i].outputType = outputMappings[i].outputType;
        this.data[i].outputName = outputMappings[i].outputName;
        this.data[i].outputDescription = outputMappings[i].outputDescription;
        this.data[i].OEnabled = outputMappings[i].Oenabled;
        this.data[i].OTenabled = outputMappings[i].OTenabled;
        this.data[i].outputOrder = outputMappings[i].outputOrder;
        this.data[i].scheduleState = "Output Off";
        this.data[i].scheduleOutputValue = 0;
        this.data[i].manualState = "Output Off";
        this.data[i].manualOutputValue = 0;
        this.data[i].delayTime = null;
        this.data[i].outputPin = outputMappings[i].OUTPUT_PIN;
        this.data[i].outputPWM = outputMappings[i].PWM_PIN ? 1 : 0;
        this.data[i].outputPWMPin = outputMappings[i].PWM_PIN ? outputMappings[i].PWM_PIN : null;
        this.data[i].outputPWMInversion = outputMappings[i].outputPWMInversion;
        this.data[i].outputObject = null;
        this.data[i].outputPWMObject = null;
        this.data[i].outputController = "Schedule"
        this.data[i].lastOutputController = "Schedule"
        this.data[i].outputSchedules = [];
      }
      // Sort things according to logical order (iterating over state should return logical order now)
      this.data.sort(function(a, b) {
        if(a.outputOrder == b.outputOrder){
          return 0;
        } else if(b.outputOrder == 0){
          return -1;
        } else if (a.outputOrder == 0) {
          return 1;
        }
        if(a.outputOrder >= b.outputOrder) {
          return 1;
        } else {
          return -1;
        }
      })
      this.eventMappings = await dbcalls.getEnabledEvents()
      return this;
    })();
  }

  getOutputIndexData(){
    let outputs = [];
    for(let i = 0; i < this.data.length; i++){
      let RowDataPacket = {}
      RowDataPacket.outputID = this.data[i].outputID
      RowDataPacket.outputType = this.data[i].outputType
      RowDataPacket.outputName = this.data[i].outputName
      RowDataPacket.outputDescription = this.data[i].outputDescription
      RowDataPacket.OEnabled = this.data[i].OEnabled
      RowDataPacket.outputPWM = this.data[i].outputPWM
      RowDataPacket.outputPWMInversion = this.data[i].outputPWMInversion
      RowDataPacket.OTenabled = this.data[i].OTenabled
      RowDataPacket.outputOrder = this.data[i].outputOrder
      outputs.push(RowDataPacket)
    }
    //Sort outputs in ascending order, with 0 at the bottom
    outputs.sort(function(a, b) {
      if(a.outputOrder == b.outputOrder){
        return 0;
      } else if(b.outputOrder == 0){
        return -1;
      } else if (a.outputOrder == 0) {
        return 1;
      }
      if(a.outputOrder >= b.outputOrder) {
        return 1;
      } else {
        return -1;
      }
    })
    return outputs
  }

  setOutputDelayTime(outputID, delayTime) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        this.data[i].delayTime = delayTime;
      }
    }
  }

  getOutputDelayTime(outputID) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i].delayTime
      }
    }
  }
  
  setOutputScheduleState(outputID, scheduleState, scheduleOutputValue) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        this.data[i].scheduleState = scheduleState;
        if(scheduleOutputValue){
          this.data[i].scheduleOutputValue = scheduleOutputValue;
        }
      }
    }
  }

  setOutputManualState(outputID, manualState, manualOutputValue) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        this.data[i].manualState = manualState;
        if(manualOutputValue){
          this.data[i].manualOutputValue = manualOutputValue;
        }
      }
    }
  }

  setOutputObject(outputID, obj) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        this.data[i].outputObject = obj;
      }
    }
  }

  setOutputPWMObject(outputID, obj) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        this.data[i].outputPWMObject = obj;
      }
    }
  }


  getOutputState(){
    return this.data;
  }

  setOutputController(outputID, status){
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        this.data[i].outputController = status;
      }
    }
  }
  
  getOutputController(outputID){
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i].outputController
      }
    }
  }
  
  setLastOutputController(outputID, status){
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        this.data[i].lastOutputController = status;
      }
    }
  }
  
  getOutputName(outputID){
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i].outputName
      }
    }
  }

  getOutput(outputID){
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i]
      }
    }
}
}
