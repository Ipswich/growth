var mappings = require('../utility_modules/Mappings.js');
var dbcalls = require('../utility_modules/database_calls.js')

module.exports = class OutputState {
  constructor() {
    return (async () => {
      this.data = [];
      //Get outputs
      let outputMappings = await mappings.getOutputMappings();
      //map initial values (default to off (event 2))
      for (let i = 0; i < outputMappings.length; i++){
        this.data[i] = {};
        this.data[i].outputID = outputMappings[i].outputID;
        this.data[i].outputName = outputMappings[i].outputName;
        this.data[i].outputType = outputMappings[i].outputType;
        this.data[i].scheduleState = "Output Off";
        this.data[i].scheduleOutputValue = 0;
        this.data[i].manualState = "Output Off";
        this.data[i].manualOutputValue = 0;
        this.data[i].delayTime = null;
        this.data[i].outputPin = outputMappings[i].OUTPUT_PIN;
        this.data[i].outputPWMPin = outputMappings[i].PWM_PIN ? outputMappings[i].PWM_PIN : null;
        this.data[i].outputPWMInversion = outputMappings[i].outputPWMInversion;
        this.data[i].outputObject = null;
        this.data[i].outputPWMObject = null;
        this.data[i].outputController = "Schedule"
        this.data[i].lastOutputController = "Schedule"
        this.data[i].outputSchedules = [];
      }
      this.eventMappings = await dbcalls.getEnabledEvents()
      return this;
    })();
  }

  setOutputDelayTime(outputID, delayTime) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        this.data[i].delayTime = delayTime;
      }
    }
  }

  getOutputDelayTime(outputID) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i].delayTime
      }
    }
  }
  
  setOutputScheduleState(outputID, scheduleState, scheduleOutputValue) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        this.data[i].scheduleState = scheduleState;
        if(scheduleOutputValue){
          this.data[i].scheduleOutputValue = scheduleOutputValue;
        }
      }
    }
  }

  setOutputManualState(outputID, manualState, manualOutputValue) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        this.data[i].manualState = manualState;
        if(manualOutputValue){
          this.data[i].manualOutputValue = manualOutputValue;
        }
      }
    }
  }

  getOutputScheduleState(outputID) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i].scheduleState;
      }
    }
  }

  addOutputSchedules(outputID, scheduleID, scheduleType, triggerTime) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        this.data[i].outputSchedules.push({scheduleID, scheduleType, triggerTime});
      }
    }
  }

  clearTimeOutputSchedules(outputID) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        let j = this.data[i].outputSchedules.length - 1
        for(j; j >= 0; j--){
          if(this.data[i].outputSchedules[j].scheduleType == 'Time'){
            this.data[i].outputSchedules[j].scheduleType.splice(j, 1);
          }
        }
      }
    }
  }

  checkOutputSchedules(outputID, scheduleID) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        let data = this.data[i].outputSchedules.findIndex((e) => e.scheduleID == scheduleID);
        return ((data == -1) ? false : true);
      }
    }
  }

  getOutputSchedulesLength(outputID) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i].outputSchedules.length;
      }
    }
  }

  removeOutputSchedules(outputID, scheduleID) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        let index = this.data[i].outputSchedules.findIndex((e) => e.scheduleID == scheduleID);
        this.data[i].outputSchedules.splice(index, 1)
      }
    }
  }

  getOutputSchedules(outputID) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i].outputSchedules;
      }
    }
  }

  setOutputObject(outputID, obj) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        this.data[i].outputObject = obj;
      }
    }
  }

  setOutputPWMObject(outputID, obj) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        this.data[i].outputPWMObject = obj;
      }
    }
  }

  getOutputObject(outputID) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i].outputObject;
      }
    }
  }

  getOutputPWMObject(outputID) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i].outputPWMObject;
      }
    }
  }

  getOutputType(outputID) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i].outputType;
      }
    }
  }

  getOutputPin(outputID) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i].outputPin;
      }
    }
  }

  getOutputPWMPin(outputID) {
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i].outputPWMPin;
      }
    }
  }

  getOutputState(){
    return this.data;
  }

  setOutputController(outputID, status){
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        this.data[i].outputController = status;
      }
    }
  }
  
  setLastOutputController(outputID, status){
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        this.data[i].lastOutputController = status;
      }
    }
  }
  
  getOutputController(outputID){
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i].outputController
      }
    }
  }
  
  getLastOutputController(outputID){
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i].lastOutputController
      }
    }
  }
  
  getOutputName(outputID){
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i].outputName
      }
    }
  }

  getOutput(outputID){
    for(let i = 0; i < this.data.length; i++){
      if(this.data[i].outputID == outputID){
        return this.data[i]
      }
    }
}
}
