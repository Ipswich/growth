const dbcalls = require('../../utility_modules/database_calls.js')
const eventTriggers = require('../EventTriggers.js')
const moment = require('moment');
const utils = require('../../utility_modules/Utils.js')

// Clear triggered schedules every minute
var triggeredSchedules = []
setInterval(()=> {
  triggeredSchedules = []
}, 1000 * 60)

//Runs periodic events based on current time
module.exports.PeriodicEventHandler = async function PeriodicEventHandler(state) {
  const events = await dbcalls.getEnabledEvents();
  var schedule = await eventTriggers.getSchedule('Periodic');
  schedule = utils.eventTypeMapper(events, schedule)
  //Error on things
  if (events == undefined || schedule == undefined) {
    console.error("PeriodicEventHandler.js: PeriodicEventHandler() failed!");
  } else {
    // Iterate through periodic Schedules
    for(let i = 0; i < schedule.length; i++){
      // Set nextStartTime equal to the last trigger time plus the duration + interval
      var nextStartTime = moment().add((schedule[i].eventInterval + schedule[i].eventDuration), 'minute') 
      // If current time matches or is after start time, AND has not been triggered in the past minute -  trigger event.
      if(moment().isSameOrAfter(moment(schedule[i].eventTriggerTime, "HH:mm:ss"), 'minute') && !triggeredSchedules.includes(schedule[i].scheduleID)) {
        // Add to array of triggered schedule
        triggeredSchedules.push(schedule[i].scheduleID)
        eventTriggers.triggerEvent(schedule[i], state, "Output On");
        // Set up next scheduled event!
        await dbcalls.disableSchedule(schedule[i].scheduleID, "'SYSTEM'")        
        dbcalls.addNewSchedule("'Periodic'",'1', null, null, schedule[i].outputID, schedule[i].outputValue, null, "'" + nextStartTime.format("HH:mm:ss") + "'", schedule[i].eventDuration, schedule[i].eventInterval, null, null, '1', "'" + schedule[i].addedBy + "'", null)
        // Set timeout to trigger off event after duration is up.
        setTimeout(() => {
          eventTriggers.triggerEvent(schedule[i], state, "Output Off");        
        }, 1000 * 60 * schedule[i].eventDuration); // Turn off after eventDuration minutes
      }
    }
  }
}
