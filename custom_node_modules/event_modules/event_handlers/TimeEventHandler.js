const dbcalls = require('../../utility_modules/database_calls.js')
const eventTriggers = require('../EventTriggers.js')
const moment = require('moment');
const utils = require('../../utility_modules/Utils.js')

// Clear triggered schedules every two minutes
var triggeredSchedules = []

//Runs time events based on current time
module.exports.TimeEventHandler = async function TimeEventHandler(state) {
  const events = await dbcalls.getEnabledEvents();
  var schedule = await eventTriggers.getSchedule('Time');
  schedule = utils.eventTypeMapper(events, schedule)
  //Error on things
  if (events == undefined || schedule == undefined) {
    console.error("TimeEventHandler.js: TimeEventHandler() failed!");
  } else {
    //If no errors, get current timestamp
    const currentTime = moment().format('HH:mm:ss');
    //Iterate through time Schedules
    for(let i = 0; i < schedule.length; i++){
      var present = false
      for(let j = 0; j < triggeredSchedules.length; j++ ){
        // If the triggered schedule is present, update marker.  
        if(schedule[i].scheduleID == triggeredSchedules[j].scheduleID){
          present = true
        }
        // If triggered schedule has the same minute as now, remove the schedule.
        if(moment().isSame(triggeredSchedules[j].timeout, 'minute')){
          triggeredSchedules.splice(j, 1)          
        }
      };
      if (present == true){        
        continue
      }
      var triggerTime = moment(schedule[i].eventTriggerTime, "HH:mm:ss");
      //If trigger time matches time stamp AND schedule has not been triggered, trigger event.
      if(moment(currentTime, "HH:mm:ss").isSame(triggerTime, 'minute') && !triggeredSchedules.includes(schedule[i].scheduleID)) {
        eventTriggers.triggerEvent(schedule[i], state);
        // Add to array of triggered schedule
        let timeout;
        if(schedule[i].eventName == 'Warn'){
          timeout = moment().add(schedule[i].eventInterval, 'm')
        } else {
          timeout = moment().add(1, 'm')
        }           
        let data = {
          scheduleID: schedule[i].scheduleID,
          timeout: timeout
        }
        triggeredSchedules.push(data)          
      }
    }
  }
}
