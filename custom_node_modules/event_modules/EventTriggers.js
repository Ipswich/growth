const moment = require('moment')
const nodemailer = require('nodemailer')
const config = require('../../config/config.json')
const webdata = require('../../config/web-data-config.json')
var dbcalls = require('../utility_modules/database_calls.js')
const utils = require('../utility_modules/Utils.js')

//Gets the current live and enabled schedule from DB
module.exports.getSchedule = async function getSchedule(type) {
  return filterByScheduleType(await dbcalls.getEnabledLiveSchedules(), type)
}

//Triggers event on hardware
module.exports.triggerEvent = function triggerEvent(schedule, state, event = null) {
  //Iterate through output mappings to get output
  for(let i = 0; i < state.outputState.getOutputState().length; i++){
    //if current output ID matches passed schedule output ID
    if (state.outputState.getOutputState()[i].outputID == schedule.outputID){
      //set output to that output
      var output = state.outputState.getOutputState()[i];
    }
  }
  //Case switch based on event ID 1 = on, 2 = off
  let outputStateData = state.outputState.getOutputState();
  //If event is set, switch differently.
  var switchCase
  if (event != null){
    switchCase = event
  } else {
    switchCase = schedule.eventID
  }
  let currentTime = '[' + moment().format('HH:mm') + ']'
  switch (switchCase) {
    case 'Output On':
      //Iterate through state
      for (let i = 0; i < outputStateData.length; i++){
        //if state is already set to on AND outputValue == scheduleOutputValue, return
        if ((output.outputID == outputStateData[i].outputID) && (outputStateData[i].scheduleState == 1) && (outputStateData[i].scheduleOutputValue == schedule.outputValue)) {
          return;
        }
      }
      //Otherwise, update state and log and do stuff
      if(output.outputPWMPin != null) {
        console.log(currentTime + "  " + output.outputName + ": ON @ " + schedule.outputValue + "% - [Output Pin: " + output.outputPin + ", PWM Pin: " + output.outputPWMPin + "]");      
      } else {
        console.log(currentTime + "  " + output.outputName + ": ON - [Output Pin: " + output.outputPin + "]");      
      }
      // Turn on relay
      output.outputObject.close();
      if(output.outputPWMObject){
        // Do math for PWM object (255 bit)
        let value;
        let base = 255/100;
        //If inversion set, use 255 - PWM value
        if (output.outputPWMInversion == 0) {
          value = Math.round(base * schedule.outputValue);
        } else {
          value = 255 - Math.round(base * schedule.outputValue);
        }
        output.outputPWMObject.brightness(value);
      }
      state.outputState.setOutputScheduleState(output.outputID, 1, schedule.outputValue);
      dbcalls.logScheduledEvent(schedule.scheduleID);
      break;

    case 'Output Off':
      //Iterate through state - if state is already set to off, return
      for (let i = 0; i < outputStateData.length; i++){
        if ((output.outputID == outputStateData[i].outputID) && (outputStateData[i].scheduleState == 2)) {
          return;
        }
      }
      //Otherwise, update state and log and do stuff
      console.log(currentTime + "  " + output.outputName + ": OFF - [Output Pin: " + output.outputPin + "]");  
      output.outputObject.open();
      state.outputState.setOutputScheduleState(output.outputID, 2, schedule.outputValue);
      dbcalls.logScheduledEvent(schedule.scheduleID);
      break;

    case 'Warn' :
      // If no email, send no email
      if(schedule.email == null || schedule.email == undefined){
        break;
      }
      const transporter = nodemailer.createTransport(config.nodemailer)
      // Create message based on scheduleType
      let msg = ''
      switch (schedule.scheduleType) {
        case 'Time':
          msg = "Time warning: " + utils.formatTimeString(schedule.eventTriggerTime)
          break;
        case 'Sensor':
          let comparator = (schedule.scheduleComparator == '<') ? ' is less than ' : ' is greater than '
          msg = "Sensor warning: " + schedule.sensorType + " @ " + schedule.sensorLocation + comparator + schedule.sensorValue + schedule.sensorUnits + "."
          break;
      }
      // Pull data from config files
      const mailOptions = {
        from: config.nodemailer.auth.user,
        to: schedule.email,
        subject: "Warning from " + webdata.title,
        text: msg
      }
      // SEND THE MAIL! And log event.
      transporter.sendMail(mailOptions, function(error, info) {
        if(error) {
          console.log("Error sending mail: " + error)
        } else {
          console.log(currentTime + "  " + "Warning sent to " + schedule.email + ".")      
          dbcalls.logScheduledEvent(schedule.scheduleID);
        }
      })
      break;
  }

}

module.exports.periodicEventTrigger = function periodicEventTrigger(schedule, state){
  //Iterate through output mappings to get output
  for(let i = 0; i < state.outputState.getOutputState().length; i++){
    //if current output ID matches passed schedule output ID
    if (state.outputState.getOutputState()[i].outputID == schedule.outputID){
      //set output to that output
      var output = state.outputState.getOutputState()[i];
    }
  }
}


//Gracefully turns off and updates state for the given output
module.exports.turnOffOutput = function turnOffOutput(state, output){
  // if state is already set to off, return
  if (output.scheduleState == 2) {
    return;
  }
  //Otherwise, update state and log and do stuff
  let currentTime = '[' + moment().format('HH:mm') + ']'
  console.log(currentTime + "  " + output.outputName + ": OFF - [Output Pin: " + output.outputPin + "]");  
  output.outputObject.open();
  state.outputState.setOutputScheduleState(output.outputID, 2, 0);
}


//Function for filtering out type schedules from Sensor Schedules.
function filterByScheduleType(schedule, type) {
  var result = [];
  for(let i = 0; i < schedule.length; i++){
    if (schedule[i].scheduleType == type){
      result.push(schedule[i]);
    }
  }
  return result;
}
