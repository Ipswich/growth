var five = require("johnny-five");
var dbcalls = require('./utility_modules/database_calls.js')
const events = require('events');
var pEventHandler = require('./event_modules/event_handlers/PeriodicEventHandler.js');
var sEventHandler = require('./event_modules/event_handlers/SensorEventHandler.js');
var tEventHandler = require('./event_modules/event_handlers/TimeEventHandler.js');
var sLogger = require('./event_modules/SensorLogger.js');
const utils = require('./utility_modules/Utils.js');

const LOGGING_TIMER = 60 * 1000 // 1 MINUTE
const BME280_ADDRESS = 0x76; // TRY 0x77 IF BOARD ISN'T FINDING SENSOR
var board;
var DS18B20_Count = 0;
var DS18B20_Pin = -1;
var DS18B20_Array = [];

module.exports.initialize = async function initialize(state, app) {
  const doneEmitter = new events.EventEmitter();
  
  return new Promise(async (resolve) => {
    // Get DS18B20 count and pin
    for (i = 1; i <= state.sensorState.getSensorState().length; i++) {
      if (state.sensorState.getSensor(i).sensorModel == "DS18B20") {
        DS18B20_Count++
        DS18B20_Pin = state.sensorState.getSensorPin(i)
      }
    }
    console.log("Initializing board. . .");
    board = new five.Board({
    repl: false,
    // debug: false
    });
    state.board = board;
    resolve(board)
  }).then((board) => {
    //Find and push DS18B20 Address onto Array
    board.once("ready", function() {   
      if (DS18B20_Count != 0) {
        five.Thermometer.Drivers.get(
          this, "DS18B20", {
            pin: DS18B20_Pin
          }).on('initialized', function(addr){
            //If this address exists in database, do not include in list
            let include = true;
            for (i = 1; i <= state.sensorState.getSensorState().length; i++) {
              if (state.sensorState.getSensor(i).sensorModel == "DS18B20" && state.sensorState.getSensor(i).sensorAddress == addr) {              
                include = false;
              }
            }
            if (include){
              DS18B20_Array.push(addr)
            }
            DS18B20_Count--
            if (DS18B20_Count == 0 ){            
              doneEmitter.emit('booted')
            }
        })
      }      
      doneEmitter.on('booted', async () => {
        if(DS18B20_Count == 0 ){ 
          console.log("Initializing sensors. . .");     
          await initializeSensors(state)
          console.log("Initializing outputs. . ."); 
          await initializeOutputs(state)
          doneEmitter.emit('hardwareInitialized', state)
        }
      })
      doneEmitter.on('hardwareInitialized', async (state) => {
        console.log("Initializing schedule. . .")
        await initializeSchedule(state)
        app.set('state', state)        
        console.log(". . .Done!");
      })

      doneEmitter.emit('booted')
    })
  });
}

async function initializeOutputs(state) {
  return new Promise((resolve) => {
    //Set up outputs and bind to state object.
    for(let i = 1; i <= state.outputState.getOutputState().length; i++){
      if(state.outputState.getOutputType(i) == 'Light'){
        var output = new five.Relay(state.outputState.getOutputPin(i));
        var PWM = new five.Led(state.outputState.getOutputPWMPin(i));
        state.outputState.setOutputObject(i, output);
        state.outputState.setOutputPWMObject(i, PWM);
        //Handle board interrupts (turn off stuff)
        board.on('exit', () => {
          output.open()
          PWM.brightness(0)
        })
      } else {
        var output = new five.Relay(state.outputState.getOutputPin(i));
        state.outputState.setOutputObject(i, output);
        //Handle board interrupts (turn off stuff)
        board.on('exit', () => {
          output.open()           
        })
      }
    }
    resolve();
  });
}

async function initializeSensors(state) {
  return new Promise((resolve) => {
    //Set up sensors and bind to state object.
    DS18B20_Array = DS18B20_Array.map(e => e.toString())
    //Get max hardwareID
    var hardwareID = Math.max.apply(Math, state.sensorState.getSensorState().map(function(o) { return o.sensorHardwareID; }));
    //Loop through hardware IDs
    let counter = 0
    while (hardwareID > counter) {
      counter++
      let i = 1;
      //Loop through sensors to find ones with matching hardwareID
      for(i; i <= state.sensorState.getSensorState().length; i++){        
        let sensor;
        obj = {controller: state.sensorState.getSensorModel(i)}
        //If matching hardwareID and protocol is I2C, get model
        if(counter == state.sensorState.getSensorHardwareID(i) && state.sensorState.getSensorProtocol(i) == 'I2C'){
          if(state.sensorState.getSensorModel(i) == "BME280"){
            obj.address = BME280_ADDRESS;
          }
        // Else if the hardware ID is the current ID, get pin   
        } else if(counter == state.sensorState.getSensorHardwareID(i)) {
          obj.pin = state.sensorState.getSensorPin(i)
        // Otherwise, skip
        } else {
          continue
        }
        // Create sensor based on type
        switch (state.sensorState.getSensorType(i)) {
          case 'Temperature':
            // If DS18B20, go through array of addresses
            if(state.sensorState.getSensorModel(i) == "DS18B20"){     
              let address = state.sensorState.getSensorAddress(i)
              // If address is null, pull from bottom of array and update sensor
              if (address == null) {
                address = DS18B20_Array[0]
                dbcalls.updateSensorAddress(address, state.sensorState.getSensorID(i))                    
              }
              //Remove address from database
              const index = DS18B20_Array.indexOf(address);
              if (index > -1) {
                DS18B20_Array.splice(index, 1);
              }
              obj.pin = DS18B20_Pin
              address = Number(address)
              obj.address = address
              sensor = new five.Thermometer(obj)
            } else {
              //Otherwise normal temperature sensor
              sensor = new five.Thermometer(obj)
            } 
            break;
          case 'Humidity':
            sensor = new five.Hygrometer(obj)
            break;
          case 'Pressure':
            sensor = new five.Barometer(obj)
            break;
          case 'CarbonDioxide':
            sensor = -1;
            break;
          default:
            sensor = -1;
          }
          state.sensorState.setSensorObject(i, sensor);                  
        }
      }
    resolve()
  });
}


//Logic for event checking - checks once a minute
//Check once on load, then every minute thereafter.
async function initializeSchedule(state) {
  //Take initial reading to update database
  //Run events when ready, then set Interval.
  await sLogger.addSensorReadings(state)
  await tEventHandler.TimeEventHandler(state);
  await sEventHandler.SensorEventHandler(state);
  await pEventHandler.PeriodicEventHandler(state);
  setInterval(async function() {
    await sLogger.addSensorReadings(state)
    await utils.scheduleMinder(state)
    await tEventHandler.TimeEventHandler(state);
    await sEventHandler.SensorEventHandler(state);
    await pEventHandler.PeriodicEventHandler(state);
  }, LOGGING_TIMER);
}

