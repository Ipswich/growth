const five = require("johnny-five");
const events = require('events');
const initializeSensors = require('./initialization_modules/initializeSensors')
const initializeOutputs = require('./initialization_modules/initializeOutputs')
const initializeSchedule = require('./initialization_modules/initializeSchedule')
const printouts = require('./utility_modules/printouts')


module.exports.initialize = async function initialize(state) {
  var board;
  var doneEmitter = new events.EventEmitter()
  
  return new Promise(async (resolve) => {
    printouts.simpleLogPrintout("Initializing board. . .");
    let board_object = {
      repl: false,
      // debug: false
    }
    board = new five.Board(board_object);
    state.board = board;
    resolve()
  }).then(() => {
    //Find and push DS18B20 Address onto Array
    board.once("ready", async function() {
        
      doneEmitter.on('booted', async () => {
        try {                     
          printouts.simpleLogPrintout("Initializing sensors. . .");
          await initializeSensors.initializeSensors(state)
          printouts.simpleLogPrintout("Initializing outputs. . .");
          initializeOutputs.initializeOutputs(state, board)        
          doneEmitter.emit('hardwareInitialized', state)        
        } catch (e) {
          process.exit(-1)
        }
      })
      doneEmitter.on('hardwareInitialized', async (state) => {        
        printouts.simpleLogPrintout("Initializing schedule. . .")
        await initializeSchedule.initializeSchedule(state)
        // If relay control exists, turn on relays
        if(state.relay_control){
          state.relay_control.high()
        }       
        printouts.simpleLogPrintout(". . .Done!");
      })
      doneEmitter.emit('booted')
    })
  });
}