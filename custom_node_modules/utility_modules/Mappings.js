const config = require('../../config/config.json')
const dbcalls = require('./database_calls.js')
const utils = require('./Utils.js')

var pinout = utils.getBoardMapping()
//Maps pins for each output.
module.exports.getOutputMappings = async function getOutputMapings() {
  return mapOutputPins(await dbcalls.getEnabledOutputs())
}

//Maps pins for each sensor
module.exports.getSensorMappings = async function getSensorMappings() {
  return mapSensorPins(await dbcalls.getEnabledSensors())
}

function mapOutputPins(outputs) {
  var outputPin = pinout.START_OUTPUT_PIN;
  var pwmPin = pinout.START_PWM_PIN
  //If relay toggle prevention is set in config, skip first output
  if(config.relay_toggle_prevention){
    outputPin++;
  }
  //Iterate through outputs
  for(i = 0; i < outputs.length; i++){
    //If we've run out of output pins, error.
    if (outputPin > pinout.END_OUTPUT_PIN) {
      console.error("Mappings.js: mapOutputPins() failed, out of digital pins!");
      process.exit(-1)
      break;
    }
    //Otherwise set OUTPUTPIN property to outputPin and increment to the next one
    outputs[i].OUTPUT_PIN = outputPin;
    outputPin++;
    //If we've run out of PWM pins, error.
    if (pwmPin > pinout.END_PWM_PIN) {
      console.error("Mappings.js: mapOutputPins() failed, out of PWM pins!");
      process.exit(-1)
      break;
    }
    //Otherwise apply PWMPIN property if necessary.
    if(outputs[i].outputPWM == 1) {
        outputs[i].PWM_PIN = pwmPin;
        pwmPin++;
    }
  };
  return outputs;
}

//Adds SENSORPIN property to each sensor
function mapSensorPins(sensors) {
  // console.log(sensors)
  let sensorPin = pinout.START_SENSOR_PIN;
  let analogPin = pinout.START_ANALOG_PIN;
  let DS18B20Pin = -1;
  //Iterate through sensors
  let hardwareIDs = [];
  for(i = 0; i < sensors.length; i++) {
    //Check to see if hardwareID exists in array
    if(hardwareIDs.indexOf(sensors[i].sensorHardwareID) === -1){
      //if no, add to array.
      hardwareIDs.push(sensors[i].sensorHardwareID);
    } else {
      //if yes, skip to avoid unnecessary mappings.
      continue;
    }
    //If we've run out of sensor pins, error.
    if (sensorPin > pinout.END_SENSOR_PIN || analogPin > pinout.END_ANALOG_PIN) {
      console.error("Mappings.js: mapSensorPins() failed, out of pins!");
      process.exit(-1)
      break;
    }
    //Otherwise, case switch to apply pins to appropriate sensors
    switch (sensors[i].sensorProtocol) {
      case "I2C":
        continue;
      case "ANALOG":
        sensors[i].SENSOR_PIN = analogPin;
        analogPin++;
        continue;
      case "ONEWIRE":
        if (DS18B20Pin == -1) {
          DS18B20Pin = sensorPin
          sensorPin++;
        }
        sensors[i].SENSOR_PIN = DS18B20Pin;
        continue;
      default: 
        sensors[i].SENSOR_PIN = sensorPin;
        sensorPin++;
    } 
  };
  return sensors;
}
