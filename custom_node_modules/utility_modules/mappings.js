const fs = require('fs')
var config_helper = require('./config_helper');
const dbcalls = require('./database_calls.js')
const {errorPrintout} = require('./printouts')

const BOARD_MAPPINGS_LOCATION = './config/board_mappings.json'
var board = null;
/**
 * Singleton; Reads pinout from file - if board is undefined, reads it and
 * returns it. Otherwise returns the previously loaded board file as a copy
 * (read-only).
 * @returns JSON pinout for the board listed in config.
 */
module.exports.getBoardMapping = function getBoardMapping(){
  var config = config_helper.getConfig()
  if(board == null) {
    let board_mappings = JSON.parse(fs.readFileSync(BOARD_MAPPINGS_LOCATION).toString())    
    board = board_mappings[config.board]  
  }
  return JSON.parse(JSON.stringify(board))
}

//Maps pins for each output.
/**
 * Gets a mapping of outputs to output and PWM pins referencing the database.
 * @returns {[object]} A mapping of outputs to output and PWM pins.
 */
module.exports.getOutputMappings = async function getOutputMapings() {
  return exports.mapOutputPins(await dbcalls.getEnabledOutputs())
}

//Maps pins for each sensor
/**
 * Gets a mapping of sensors to the appropriate pins referencing the database.
 * @returns {[object]} A mapping of sensors to various data pins.
 */
module.exports.getSensorMappings = async function getSensorMappings() {
  return exports.mapSensorPins(await dbcalls.getEnabledSensors())
}


function mapOutputPins(outputs) {
  var config = config_helper.getConfig()
  var pinout = exports.getBoardMapping()
  var outputPins = pinout.OUTPUT_PINS
  var pwmPins = pinout.PWM_PINS
  //If relay toggle prevention is set in config, skip first output
  if(config.relay_toggle_prevention){
    if(pinCountCheck(outputPins, "output")) {return}
    outputPins.shift();
  }
  //Iterate through outputs
  for(i = 0; i < outputs.length; i++){
    //If we've run out of output pins, error.
    if(pinCountCheck(outputPins, "output")) {return}
    //Otherwise set OUTPUTPIN property to outputPin and increment to the next one
    outputs[i].OUTPUT_PIN = outputPins.shift();
    //If we've run out of PWM pins, error.
    if(pinCountCheck(pwmPins, "PWM")) {return}
    //Otherwise apply PWMPIN property if necessary.
    if(outputs[i].outputPWM == 1) {
        outputs[i].PWM_PIN = pwmPins.shift();
    }
  };
  return outputs;
}
module.exports.mapOutputPins = mapOutputPins

/**
 * Creates a mapping of sensors to the appropriate pins. Adds pins to the passed
 * object.
 * @param {[object]} outputs An array of sensors and their properties.
 * @returns {[object]} A mapping of sensors to various data pins.
 */
function mapSensorPins(sensors) {
  var pinout = exports.getBoardMapping()
  let sensorPins = pinout.SENSOR_PINS;
  let analogPins = pinout.ANALOG_PINS;
  let onewirePin = -1;
  //Iterate through sensors
  let hardwareObject = {}
  for(i = 0; i < sensors.length; i++) {
    //Check to see if hardwareID exists in object
    if(Object.keys(hardwareObject).indexOf(String(sensors[i].sensorHardwareID)) != -1){
      //if yes, set to stored hardwareID and end.
      sensors[i].SENSOR_PIN = hardwareObject[sensors[i].sensorHardwareID]
      continue;
    }
    //Otherwise, case switch to apply pins to appropriate sensors
    switch (sensors[i].sensorProtocol) {
      case "I2C":
        continue;
      case "ANALOG":
        //If we've run out of analog pins, error.
        if(pinCountCheck(analogPins, "analog")) {return}
        let analogPin = analogPins.shift();
        hardwareObject[sensors[i].sensorHardwareID] = analogPin;
        sensors[i].SENSOR_PIN = analogPin;
        continue;
      case "ONEWIRE":
        if (onewirePin == -1) {
          //If we've run out of sensor pins, error.
          if(pinCountCheck(sensorPins, "sensor")) {return}
          onewirePin = sensorPins.shift()
        }
        hardwareObject[sensors[i].sensorHardwareID] = onewirePin;
        sensors[i].SENSOR_PIN = onewirePin;
        continue;
      default:
        //If we've run out of sensor pins, error.
        if(pinCountCheck(sensorPins, "sensor")) {return}
        let sensorPin = sensorPins.shift()
        hardwareObject[sensors[i].sensorHardwareID] = sensorPin;
        sensors[i].SENSOR_PIN = sensorPin
    }
  };
  return sensors;
}
module.exports.mapSensorPins = mapSensorPins

/**
 * If pins has no elements left, prints an error statement and calls process.exit(-1).
 * @param {Array} pins Array of pins to check for remaining values.
 * @param {string} pinTypeName String decription of pin type.
 * @returns {number} 1 on success, 0 otherwise.
 */
function pinCountCheck(pins, pinTypeName){
  if(pins.length < 1){
    errorPrintout("mappings.js: Mapping failed, out of " + pinTypeName + " pins.")
    process.exit(-1)
    return 1
  }
  return 0
}