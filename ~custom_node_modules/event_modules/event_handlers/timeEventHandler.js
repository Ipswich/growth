// const dbcalls = require('../../utility_modules/database_calls.js');
// const eventTriggers = require('../eventTriggers.js');
// const moment = require('moment');
// const utils = require('../../utility_modules/utils.js');
// const printouts = require('../../utility_modules/printouts');
// const TriggeredScheduleMinder = require('./TriggeredScheduleMinder');

// let triggeredScheduleMinder = new TriggeredScheduleMinder()

// /**
//  * Runs time schedules based on the passed state. If a schedule's run time 
//  * matches the current minute, runs the schedule. Schedules are minded, and only
//  * run once per minute.
//  * @param {object} state The current state of the system.
//  */
// module.exports.timeEventHandler = async function timeEventHandler(state) {
  
//   const events = await dbcalls.getEnabledEvents();
//   let schedule = await utils.getSchedule('Time');
//   schedule = utils.eventTypeMapper(events, schedule)
//   //Error on things
//   if (events == undefined || schedule == undefined) {
//     printouts.simpleErrorPrintout("timeEventHandler.js: timeEventHandler() failed!");
//     throw new Error("timeEventHandler.js: timeEventHandler() failed!")
//   } else {
//     //If no errors, get current timestamp
//     const currentTime = moment().format('HH:mm:ss');
//     //Iterate through time Schedules
//     for(let i = 0; i < schedule.length; i++){
//       // If the minder includes the current schedule, skip to next schedule
//       if(triggeredScheduleMinder.includes(schedule[i].scheduleID)){
//         continue
//       }
//       let triggerTime = moment(schedule[i].eventTriggerTime, "HH:mm:ss");
//       //If trigger time matches time stamp AND schedule has not been triggered, trigger event.
//       if(moment(currentTime, "HH:mm:ss").isSame(triggerTime, 'minute') && !triggeredScheduleMinder.includes(schedule[i].scheduleID)) {
//         eventTriggers.triggerEvent(schedule[i], state, null, currentTime);
//         // Add to array of triggered schedule
//         let timeout;
//         if(schedule[i].eventName == 'Email Warn'){
//           timeout = moment().add(schedule[i].eventInterval, 'm')
//         } else {
//           timeout = moment().add(1, 'm')
//         }           
//         let data = {
//           scheduleID: schedule[i].scheduleID,
//           timeout: timeout
//         }
//         triggeredScheduleMinder.add_schedule(data)
//       }
//     }
//   }
//   // Clean up all schedules from minder
//   triggeredScheduleMinder.auto_remove_schedules()
// }
